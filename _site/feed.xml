<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko# the language of your site, default as "en""><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://giljae.com/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://giljae.com/blog/" rel="alternate" type="text/html" hreflang="ko# the language of your site, default as "en"" /><updated>2021-04-28T09:37:41+00:00</updated><id>https://giljae.com/blog/feed.xml</id><title type="html">Giljae Joo (주길재)</title><subtitle>내일을 사랑하오, 사람들에게 도움이 되자!
</subtitle><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><entry><title type="html">Serverless vs. Container 선택 가이드</title><link href="https://giljae.com/blog/2021/04/15/Serverless-vs.-Container-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%9D%B4%EB%93%9C.html" rel="alternate" type="text/html" title="Serverless vs. Container 선택 가이드" /><published>2021-04-15T00:00:00+00:00</published><updated>2021-04-15T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/04/15/Serverless%20vs.%20Container%20%EC%84%A0%ED%83%9D%20%EA%B0%80%EC%9D%B4%EB%93%9C</id><content type="html" xml:base="https://giljae.com/blog/2021/04/15/Serverless-vs.-Container-%EC%84%A0%ED%83%9D-%EA%B0%80%EC%9D%B4%EB%93%9C.html">&lt;p&gt;이번 글에서는 서버리스와 컨테이너에 대해서 설명하고자 한다.&lt;/p&gt;

&lt;p&gt;일을 하다보니, VM을 이용할 경우 유후 시간이 많을 때 비용이 최적화되지 못하다는 느낌이 많이 들었다.&lt;/p&gt;

&lt;p&gt;서버리스는 서버 프로비저닝 및 유지 관리를 추상화하는 클라우드 아키텍처 모델이다.&lt;/p&gt;

&lt;p&gt;FaaS(Function-as-a-Service)라 불리며, 필요에 따라 코드를 실행하는 개념이고 실행 후 종료된다.&lt;/p&gt;

&lt;p&gt;일반적으로 FaaS와 Container를 많이 비교하곤 한다. FaaS와 Container는 몇 가지 공통점이 존재한다. 분산 시스템 및 대규모 애플리케이션 개발에 특화 되어 있고 관리상의 번거로움을 제거하고 애플리케이션과 비즈니스의 가치에 집중하고자 하는 목적이 있다.&lt;/p&gt;

&lt;h1 id=&quot;container&quot;&gt;Container&lt;/h1&gt;
&lt;p&gt;애플리케이션을 박스에 담아 어디서든 실행 할 수 있다면 좋지 않을까? 호스트 시스템이 무엇이든, 어디에 위치하든 상관없이…&lt;/p&gt;

&lt;p&gt;이것이 컨테이너화의 아이디어이다. 필요한 모든 종속성이 사전에 설치되어 있는 컨테이너를 만들고 안에 애플리케이션을 넣고 컨테이너 런타임이 설치된 모든 곳에서 실행되게 한다.&lt;/p&gt;

&lt;p&gt;이런 장점으로 인해 많은 기업이 컨테이너를 채택했고, 표준으로 정의되었다. 오늘날 대부분의 클라우드 제공사는 컨테이너화된 애플리케이션을 호스팅하는 방법을 제공하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;컨테이너의-장점&quot;&gt;컨테이너의 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;제어 및 유연성&lt;/li&gt;
  &lt;li&gt;공급 업체에 Lock-In 되지 않음&lt;/li&gt;
  &lt;li&gt;쉬운 마이그레이션&lt;/li&gt;
  &lt;li&gt;휴대성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;컨테이너의-단점&quot;&gt;컨테이너의 단점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관리 작업 (e.g. 패치 적용)&lt;/li&gt;
  &lt;li&gt;확장 속도가 느림&lt;/li&gt;
  &lt;li&gt;유지비용&lt;/li&gt;
  &lt;li&gt;처음 시작시 Learning Curve가 존재&lt;/li&gt;
  &lt;li&gt;수동 개입이 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;serverless-faas&quot;&gt;Serverless (FaaS)&lt;/h1&gt;
&lt;p&gt;서버리스의 기본 전제는 애플리케이션(모든 비즈니스 로직)이 기능과 이벤트로 구현된다는 점이다.&lt;/p&gt;

&lt;p&gt;클라우드 제공사가 어떤 일이 있어도 기능을 사용할 수 있도록 보장한다.&lt;/p&gt;

&lt;p&gt;2014년도에 서버리스 컴퓨팅이 처음 도입되었을 때, 워크로드가 상당히 제한된 상태였고 이미지 혹은 데이터 처리와 같은 소규모 작업에만 사용되었었다. 하지만 AWS가 Lambda의 이벤트 소스로 API Gateway를 도입한 후 모든 것이 바뀌게 되었다. 서버리스 컴퓨팅으로 구동되는 전체 API를 만드는 것이 가능하게 되었다. 점점 더 많은 서비스가 Lambda 제품과 통합되어 복잡한 상황의 애플리케이션을 구축할 수 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;서버리스의-장점&quot;&gt;서버리스의 장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관리 필요 없음&lt;/li&gt;
  &lt;li&gt;사용시에만 비용 지불&lt;/li&gt;
  &lt;li&gt;유휴 시간 비용 없음&lt;/li&gt;
  &lt;li&gt;자동 확장&lt;/li&gt;
  &lt;li&gt;시장 출시 시간 단축&lt;/li&gt;
  &lt;li&gt;마이크로 서비스 특성 → 명확한 코드 분리&lt;/li&gt;
  &lt;li&gt;관리 부담 대폭 감소&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;서버리스의-단점&quot;&gt;서버리스의 단점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블랙 박스 환경&lt;/li&gt;
  &lt;li&gt;공급 업체 종속&lt;/li&gt;
  &lt;li&gt;콜드 스타트&lt;/li&gt;
  &lt;li&gt;아주 복잡한 앱을 구축하기 어려울 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서버리스는 서버 또는 가상머신을 프로비저닝하고 관리할 필요가 없다.&lt;/p&gt;

&lt;p&gt;AWS를 예를 들면, EC2서버를 프로비저닝 할 필요 없이 프로그래밍 언어로 작성된 코드를 실행할 수 있다. 내부적으로는 Lambda가 임시 마이크로 컨테이너를 생성하고 코드를 실행하고 결과를 반환하는 역할을 수행한다. 따라서 인프라를 관리할 필요가 없어지게 된다. 개발자는 코드를 배포하고 실행하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;흔히, 이런 코드들도 서버에서 실행되기 때문에 서버리스라는 용어가 잘못된 것이라고 주장하는 이들도 있지만, 개발자의 관점에서 서버 처리가 필요하지 않다는 점이 중요하다.&lt;/p&gt;

&lt;p&gt;서버 기반 시스템은 주어진 기간 동안 사용한 리소스에 대해 요금을 청구한다. (e.g. EC2는 시간단위로 청구됨)&lt;/p&gt;

&lt;p&gt;반면 서버리스는 실제 사용량을 청구한다. 사용하지 않을때는 비용이 청구되지 않는다.&lt;/p&gt;

&lt;p&gt;AWS의 Lambda의 경우, 함수 코드 1백만건에 대해 0.2USD, 요청당 0.0000002USD만 청구하고 해당 기능이 동작하기 위해 필요한 메모리의 양에 따라 추가 요금이 부과된다.&lt;/p&gt;

&lt;p&gt;이 가격 모델은 고정 비용을 가변 비용으로 전환하기에 스타트업 및 중소형 애플리케이션에 유리하다.&lt;/p&gt;

&lt;p&gt;대규모 애플리케이션에서도 유리할 수 도 있다. 피크 타임때 기존 인프라에서는 프로비저닝을 미리 해야하기에 유휴 리소스에 대한 추가 비용이 생기기 때문이다.&lt;/p&gt;

&lt;p&gt;예를 들어서, 미국내 뉴스 및 엔터테인먼트 서비스인 &lt;a href=&quot;https://aws.amazon.com/solutions/case-studies/bustle/&quot;&gt;Bustle&lt;/a&gt;은 IT지출이 약 84% 감소했다. 유지 보수 직원이 자체 서버를 관리하는 비용 대비 저렴하기 때문이다.&lt;/p&gt;

&lt;p&gt;서버리스 비용 계산은 &lt;a href=&quot;https://serverless-calc.cre8ism.org/&quot;&gt;여기&lt;/a&gt;를 참고하길 바란다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“우리가 프로젝트를 진행할 때 어떤 기술을 선택해야 할까? 아마도 상황에 따라 다를 것이다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;컨테이너를-선택해야-하는-경우&quot;&gt;컨테이너를 선택해야 하는 경우&lt;/h1&gt;
&lt;p&gt;컨테이너를 사용하면 기본 운영 체제를 선택하고 설치된 프로그래밍 언어 및 런타임 버전을 완전히 제어할 수 있다. 따라서 특정 버전에 대한 요구사항이 있는 소프트웨어를 활용할 경우 유용하다.&lt;/p&gt;

&lt;p&gt;대규모 컨테이너에서 서로 다른 소프트웨어 스택을 사용하여 컨테이너를 운영할 수 있다. 특히 오래된 레거시 시스템을 컨테이너 환경으로 마이그레이션을 해야 하는 경우 매우 유용하다.&lt;/p&gt;

&lt;p&gt;하지만 이러한 유연성에는 운영 비용이 함께 제공된다. 컨테이너는 여전히 많은 유지 관리 및 설정이 필요하다.&lt;/p&gt;

&lt;p&gt;최대한 이점을 취하려면 Monolithic 애플리케이션을 마이크로 서비스로 분리해야 하며, 이를 개별 컨테이너 그룹으로 이용해야 한다. 또한 정기적으로 업데이트를 통해 운영 체제를 최신 상태로 유지해야 하는 번거로운 작업을 수행해야 한다.&lt;/p&gt;

&lt;p&gt;트래픽이 없는 경우, 완전한 종료가 불가능하다. 따라서 항상 런타임 비용이 지불해야 한다는 점을 고려해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;서버리스를-선택해야-하는-경우&quot;&gt;서버리스를 선택해야 하는 경우&lt;/h1&gt;
&lt;p&gt;서버리스는 트래픽을 자동으로 감지하고 즉시 처리해야 하는 경우 유용하다. 트래픽이 전혀 없으면 애플리케이션이 완전히 종료된다. 사용한 리소스에 대해서만 비용을 지불하게 된다.&lt;/p&gt;

&lt;p&gt;서버리스로 개발하게되면 기본 인프라 관리에 대해 신경 쓸 필요가 없다. 최종 사용자에 대한 코드와 비즈니스 가치에만 집중하면 된다. 설정이나 프로비저닝 없이 코드를 더 빠르게 전달 할 수 있기에, 개발시간이 빨라질 수 있다.&lt;/p&gt;

&lt;p&gt;그러나 현재 몇가지 제약이 존재한다. 프로그래밍 언어 및 런타임은 공급자가 지원하는 범위내에서 사용 가능하다.&lt;/p&gt;

&lt;p&gt;또한, 인프라와 코드가 너무 분리되어 있으면 애플리케이션 스택의 모든 부분에 대해 추론하기가 어려워진다.&lt;/p&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;p&gt;유연성이 필요하거나 레거시 서비스를 마이그레이션 해야 하는 경우에는 컨테이너를 선택하고 개발 속도, 자동 확장 및 현저히 낮은 런타임 비용을 지불하고 싶으면 서버리스를 선택하는 것을 고려했으면 한다.&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Serverless," /><category term="Container" /><summary type="html">이번 글에서는 서버리스와 컨테이너에 대해서 설명하고자 한다. 일을 하다보니, VM을 이용할 경우 유후 시간이 많을 때 비용이 최적화되지 못하다는 느낌이 많이 들었다. 서버리스는 서버 프로비저닝 및 유지 관리를 추상화하는 클라우드 아키텍처 모델이다. FaaS(Function-as-a-Service)라 불리며, 필요에 따라 코드를 실행하는 개념이고 실행 후 종료된다. 일반적으로 FaaS와 Container를 많이 비교하곤 한다. FaaS와 Container는 몇 가지 공통점이 존재한다. 분산 시스템 및 대규모 애플리케이션 개발에 특화 되어 있고 관리상의 번거로움을 제거하고 애플리케이션과 비즈니스의 가치에 집중하고자 하는 목적이 있다. Container 애플리케이션을 박스에 담아 어디서든 실행 할 수 있다면 좋지 않을까? 호스트 시스템이 무엇이든, 어디에 위치하든 상관없이… 이것이 컨테이너화의 아이디어이다. 필요한 모든 종속성이 사전에 설치되어 있는 컨테이너를 만들고 안에 애플리케이션을 넣고 컨테이너 런타임이 설치된 모든 곳에서 실행되게 한다. 이런 장점으로 인해 많은 기업이 컨테이너를 채택했고, 표준으로 정의되었다. 오늘날 대부분의 클라우드 제공사는 컨테이너화된 애플리케이션을 호스팅하는 방법을 제공하고 있다. 컨테이너의 장점 제어 및 유연성 공급 업체에 Lock-In 되지 않음 쉬운 마이그레이션 휴대성 컨테이너의 단점 관리 작업 (e.g. 패치 적용) 확장 속도가 느림 유지비용 처음 시작시 Learning Curve가 존재 수동 개입이 필요 Serverless (FaaS) 서버리스의 기본 전제는 애플리케이션(모든 비즈니스 로직)이 기능과 이벤트로 구현된다는 점이다. 클라우드 제공사가 어떤 일이 있어도 기능을 사용할 수 있도록 보장한다. 2014년도에 서버리스 컴퓨팅이 처음 도입되었을 때, 워크로드가 상당히 제한된 상태였고 이미지 혹은 데이터 처리와 같은 소규모 작업에만 사용되었었다. 하지만 AWS가 Lambda의 이벤트 소스로 API Gateway를 도입한 후 모든 것이 바뀌게 되었다. 서버리스 컴퓨팅으로 구동되는 전체 API를 만드는 것이 가능하게 되었다. 점점 더 많은 서비스가 Lambda 제품과 통합되어 복잡한 상황의 애플리케이션을 구축할 수 있게 되었다. 서버리스의 장점 관리 필요 없음 사용시에만 비용 지불 유휴 시간 비용 없음 자동 확장 시장 출시 시간 단축 마이크로 서비스 특성 → 명확한 코드 분리 관리 부담 대폭 감소 서버리스의 단점 블랙 박스 환경 공급 업체 종속 콜드 스타트 아주 복잡한 앱을 구축하기 어려울 수 있음 서버리스는 서버 또는 가상머신을 프로비저닝하고 관리할 필요가 없다. AWS를 예를 들면, EC2서버를 프로비저닝 할 필요 없이 프로그래밍 언어로 작성된 코드를 실행할 수 있다. 내부적으로는 Lambda가 임시 마이크로 컨테이너를 생성하고 코드를 실행하고 결과를 반환하는 역할을 수행한다. 따라서 인프라를 관리할 필요가 없어지게 된다. 개발자는 코드를 배포하고 실행하기만 하면 된다. 흔히, 이런 코드들도 서버에서 실행되기 때문에 서버리스라는 용어가 잘못된 것이라고 주장하는 이들도 있지만, 개발자의 관점에서 서버 처리가 필요하지 않다는 점이 중요하다. 서버 기반 시스템은 주어진 기간 동안 사용한 리소스에 대해 요금을 청구한다. (e.g. EC2는 시간단위로 청구됨) 반면 서버리스는 실제 사용량을 청구한다. 사용하지 않을때는 비용이 청구되지 않는다. AWS의 Lambda의 경우, 함수 코드 1백만건에 대해 0.2USD, 요청당 0.0000002USD만 청구하고 해당 기능이 동작하기 위해 필요한 메모리의 양에 따라 추가 요금이 부과된다. 이 가격 모델은 고정 비용을 가변 비용으로 전환하기에 스타트업 및 중소형 애플리케이션에 유리하다. 대규모 애플리케이션에서도 유리할 수 도 있다. 피크 타임때 기존 인프라에서는 프로비저닝을 미리 해야하기에 유휴 리소스에 대한 추가 비용이 생기기 때문이다. 예를 들어서, 미국내 뉴스 및 엔터테인먼트 서비스인 Bustle은 IT지출이 약 84% 감소했다. 유지 보수 직원이 자체 서버를 관리하는 비용 대비 저렴하기 때문이다. 서버리스 비용 계산은 여기를 참고하길 바란다. “우리가 프로젝트를 진행할 때 어떤 기술을 선택해야 할까? 아마도 상황에 따라 다를 것이다.” 컨테이너를 선택해야 하는 경우 컨테이너를 사용하면 기본 운영 체제를 선택하고 설치된 프로그래밍 언어 및 런타임 버전을 완전히 제어할 수 있다. 따라서 특정 버전에 대한 요구사항이 있는 소프트웨어를 활용할 경우 유용하다. 대규모 컨테이너에서 서로 다른 소프트웨어 스택을 사용하여 컨테이너를 운영할 수 있다. 특히 오래된 레거시 시스템을 컨테이너 환경으로 마이그레이션을 해야 하는 경우 매우 유용하다. 하지만 이러한 유연성에는 운영 비용이 함께 제공된다. 컨테이너는 여전히 많은 유지 관리 및 설정이 필요하다. 최대한 이점을 취하려면 Monolithic 애플리케이션을 마이크로 서비스로 분리해야 하며, 이를 개별 컨테이너 그룹으로 이용해야 한다. 또한 정기적으로 업데이트를 통해 운영 체제를 최신 상태로 유지해야 하는 번거로운 작업을 수행해야 한다. 트래픽이 없는 경우, 완전한 종료가 불가능하다. 따라서 항상 런타임 비용이 지불해야 한다는 점을 고려해야 한다. 서버리스를 선택해야 하는 경우 서버리스는 트래픽을 자동으로 감지하고 즉시 처리해야 하는 경우 유용하다. 트래픽이 전혀 없으면 애플리케이션이 완전히 종료된다. 사용한 리소스에 대해서만 비용을 지불하게 된다. 서버리스로 개발하게되면 기본 인프라 관리에 대해 신경 쓸 필요가 없다. 최종 사용자에 대한 코드와 비즈니스 가치에만 집중하면 된다. 설정이나 프로비저닝 없이 코드를 더 빠르게 전달 할 수 있기에, 개발시간이 빨라질 수 있다. 그러나 현재 몇가지 제약이 존재한다. 프로그래밍 언어 및 런타임은 공급자가 지원하는 범위내에서 사용 가능하다. 또한, 인프라와 코드가 너무 분리되어 있으면 애플리케이션 스택의 모든 부분에 대해 추론하기가 어려워진다. 결론 유연성이 필요하거나 레거시 서비스를 마이그레이션 해야 하는 경우에는 컨테이너를 선택하고 개발 속도, 자동 확장 및 현저히 낮은 런타임 비용을 지불하고 싶으면 서버리스를 선택하는 것을 고려했으면 한다.</summary></entry><entry><title type="html">GraalVM 소개</title><link href="https://giljae.com/blog/2021/04/13/GraalVM-%EC%86%8C%EA%B0%9C.html" rel="alternate" type="text/html" title="GraalVM 소개" /><published>2021-04-13T00:00:00+00:00</published><updated>2021-04-13T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/04/13/GraalVM%20%EC%86%8C%EA%B0%9C</id><content type="html" xml:base="https://giljae.com/blog/2021/04/13/GraalVM-%EC%86%8C%EA%B0%9C.html">&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116084932-41623000-a6d9-11eb-8676-e388116461f6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Graal”이라는 단어는 “Grail”을 의미하는 고대 프랑스어에서 유래되었다. GraalVM의 “VM”은 “JVM”내부에서 실행된다는 사실에서 비롯되었다.&lt;/p&gt;

&lt;p&gt;GraalVM은 Java 코드를 작성하고 실행할 수 있는 도구이다. Oracle에서 만든 JVM(Java Virtual Machine) 및 JDK(Java Development Kit)이고 애플리케이션의 성능과 효율성을 개선하는 목적으로 나온 고성능 런타임이다.&lt;/p&gt;

&lt;p&gt;GraalVM의 목표는 더 빠르고 유지하기 쉬운 컴파일러 작성, JVM에서 실행되는 언어의 성능 향상, 애플리케이션 시작 시간 단축, Java 에코 시스테에 다국어 지원 통합이다.&lt;/p&gt;

&lt;p&gt;GraalVM은 JDK에 최적화 컴파일러를 추가하여 성능 최적화와 다중 언어 애플리케이션에 대한 상호 운용성을 제공한다. Java코드 지원 외에도 Scala, Kotlin, Groovy, Clojure, R, Python, Javascript, Ruby등을 추가로 지원한다. 기본적으로 GraalVM을 사용하면 개발자가 단일 애플리케이션에서 여러 언어 및 라이브러리를 효율적으로 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;GraalVM은 많은 것을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116084960-4a530180-a6d9-11eb-969d-3954f11996bd.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;graal&quot;&gt;Graal?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116084990-517a0f80-a6d9-11eb-9739-6ca97b97b296.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Graal은 오라클 연구소에서 진행하는 프로젝트이다. 2012년부터 개발팀은 GraalVM에 대한 60개 이상의 논문을 발표했다. 이 프로젝트는 매우 오래 지속된 프로젝트이고 성공적으로 보고 있다.&lt;/p&gt;

&lt;p&gt;위의 그림에서 Truffle은 GraalVM의 다국어를 전담한다. Javascript, Ruby, R 및 모든 LLVM 언어의 영역이다. LLVM 컴파일러는 C코드를 LLVM 비트 코드로 변환하여 GraalVM에서 실행되게 만든다.&lt;/p&gt;

&lt;h1 id=&quot;graalvm의-구성-요소&quot;&gt;GraalVM의 구성 요소&lt;/h1&gt;
&lt;p&gt;GraalVM을 구성하는 세 가지 구성 요소는 고성능 최적화 Just-In-TIme 컴파일러, 네이티브 실행 파일을 빌드하기 위한 Ahead-of-Time 컴파일러, 다국어 지원이다.&lt;/p&gt;

&lt;p&gt;GraalVM 컴파일러 (Just-In-Time 컴파일러)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ahead-of-Time 컴파일러&lt;/li&gt;
  &lt;li&gt;JVM기반 애플리케이션을 기본적으로 실행 가능한 바이너리로 컴파일하는데 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다국어 프로그래밍 언어 지원&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그래밍 언어 인터프린터를 제공한다. 이를 통해 GraalVM을 확장하여 Java 에코 시스템에 언어를 추가할 수 있다. 또한 언어에 구애받지 않는 디버거, 프로파일러 및 힙 뷰어와 같은 도구를 지원한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;jvm-대체제로써의-graalvm&quot;&gt;JVM 대체제로써의 GraalVM&lt;/h1&gt;
&lt;p&gt;GraalVM은 Java, Scala, Kotlin 및 Java 바이트 코드에서 실행되는 모든 언어를 실행하는 JVM을 대체하려고 한다. 2019년 부터 GraalVM은 Linux상에서 프로덕션 준비가 완료되었다. 그리고 20.1.0 버전에서 Windows도 지원한다고 밝혔다.&lt;/p&gt;

&lt;p&gt;여러 언어를 지원한다는 장점이 있지만, 아직까지 성능은 빠른 언어쪽도 있지만, 개별 컴파일러에 미치지는 못한다. 그럼에도 불구하고 GraalVM에 주목을 하는 이유는 무엇일까?&lt;/p&gt;

&lt;h2 id=&quot;유지-보수&quot;&gt;유지 보수&lt;/h2&gt;
&lt;p&gt;HotSpot컴파일러는 C/C++로 작성되어 있지만, Java로 JVM 컴파일러를 다시 작성하면 새로운 기회가 열린다. 수많은 자바 프로그래머가 GraalVM에 시간을 할애하고 개선에 기여할 것이기 때문이다. V8엔진과 HotSpot 컴파일러는 모두 수십년간 최적화의 어려움을 겪고있다. 개선을 하려면 큰 틀을 깨뜨려야 하는 문제점도 안고 있다. GraalVM은 새로운 아이디어를 바탕으로 이 문제에 대한 새로운 해석을 가지고 있다. 최적화 및 확장성을 염두해두고 만들어졌기 때문이다.&lt;/p&gt;

&lt;p&gt;이런 부분들이 트위터가 GraalVM을 채택한 이유중에 하나일 것이다. 트위터는 Scala를 이용해 서비스를 만들고 있고, Scala는 JVM 바이트 코드로 컴파일되는 언어이다.&lt;/p&gt;

&lt;h2 id=&quot;truffle&quot;&gt;Truffle&lt;/h2&gt;
&lt;p&gt;Truffle는 컴파일러는 만드는 영리한 접근 방식이다. 최적화 Just-In-Time 컴파일러를 사용하면 모든 것을 컴파일하고 최적화한다는 아이디어이다. 인터프리터를 작성하면 인터프리터도 Just-In-Time 컴파일러에 의해 컴파일되고 최적화된다. 이 방식의 장점은 인터프리터이자 Compiler라고 불린다. Graal은 Ruby를 수동으로 최적화된 어셈블리 코드와 거의 비슷한 네이티브 코드로 컴파일한다.&lt;/p&gt;

&lt;p&gt;Truffle을 사용하면 새로운 프로그래밍 언어를 작성할 수 있다. 각 언어마다 특징이 존재하는데 예를 들어서 동적 타이핑은 Groovy와 Ruby에 의해 유명해졌다. Scala와 Groovy의 출현으로 스트림과 함수형 프로그래밍이 현실화되었다. 향후 Kotlin이 이 아이디어를 채택한 후 마침내 Java8에 적용되었다.&lt;/p&gt;

&lt;p&gt;Truffle로 프로그래밍 언어를 쉽게 구현할 수 있기 때문에 위와 같은 새로운 개념을 쉽게 사용할 수 있다. Truffle은 괜찮은 프로그래밍 언어를 사용하는데 걸리는 시간을 절반으로 줄여준다. 이는 결국 개발자가 프로그래밍 언어를 잘 선택하도록 도울 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;클라우드&quot;&gt;클라우드&lt;/h2&gt;
&lt;p&gt;GraalVM의 가장 큰 핵심은 AOT 컴파일러이다. 20년이 지난 후 Java가 어셈블리 코드로 컴파일 할 수 있게 되었다. 더 중요한 점은 네이티브 코드가 필요한 상황이 존재한다는 것이고 이는 AWS Lambda로 표현되었다.&lt;/p&gt;

&lt;p&gt;Lambda의 흥미로운 점은 사용량에 따라 비용을 지불한다는 것이다. 코드가 실행되는 경우에만 비용을 지불한다는 의미다. 만약 이를 VM기반으로 구현한다고 가정하면 사용하지 않을 때 VM을 반복해서 종료해야 할 것이다. 그리고 요청이 왔을때 구동을 해야 할 것이다. 이 경우 대략 3초의 시간이 필요하다.&lt;/p&gt;

&lt;p&gt;이런 문제를 AOT 컴파일러가 해결 할 수 있다. 일반적으로 Java는 수천 개의 클래스를 로드해야 하기 때문에 느리게 시작한다. 그러나 간단한 CRUD 애플리케이션은 로드된 클래스의 극히 일부만 사용한다. GET 요청에 응답하기 위해 Spring Boot의 모든 기능이 필요하진 않다.&lt;/p&gt;

&lt;p&gt;AOT 컴파일러는 코드를 최적화하고 컴파일 후 네이티브 코드로 제공된다. Quarkus, Helidon과 같은 클라우드 네이티브 프레임워크를 이용하면 0.005초에 응답하는 Lambda 함수를 만들 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;graalvm의-가격&quot;&gt;GraalVM의 가격&lt;/h1&gt;
&lt;p&gt;GraalVM의 가격은 버전에 따라 달라진다. Community Edition은 오픈 소스이다. Enterprise는 Oracle GraalVM OTN 라이센스 계약 및 Oracle 마스터 라이센스 계약에 따라 사용할 수 있다. 엔터프라이즈 에디션의 가격은 라이센스에 따라 달라진다.&lt;/p&gt;

&lt;p&gt;Oracle Master License Agreement에 따라 GraalVM Enterprise는 프로덕션 용도로 구입해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;p&gt;https://jaxenter.com/graalvm-chris-thalinger-interview-163074.html 에서는 트위터가 GraalVM을 사용하는 이유에 대해서 설명하고 있다.&lt;/p&gt;

&lt;p&gt;GraalVM은 새로운 마이크로서비스 프레임워크를 촉진하는 것처럼 보인다. 예를 들어, Quarkus는 업계 표준 프레임워크의 모음이며 네이티브 바이너리를 생성할 수 있도록 확장해준다.&lt;/p&gt;

&lt;p&gt;앞으로 GraalVM이 클라우드 네이티브 영역과 R, Python 및 Ruby와 같은 프로그래밍 언어에 상당한 영향을 미칠 것으로 기대한다.&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="GraalVM," /><category term="Java" /><summary type="html">“Graal”이라는 단어는 “Grail”을 의미하는 고대 프랑스어에서 유래되었다. GraalVM의 “VM”은 “JVM”내부에서 실행된다는 사실에서 비롯되었다. GraalVM은 Java 코드를 작성하고 실행할 수 있는 도구이다. Oracle에서 만든 JVM(Java Virtual Machine) 및 JDK(Java Development Kit)이고 애플리케이션의 성능과 효율성을 개선하는 목적으로 나온 고성능 런타임이다. GraalVM의 목표는 더 빠르고 유지하기 쉬운 컴파일러 작성, JVM에서 실행되는 언어의 성능 향상, 애플리케이션 시작 시간 단축, Java 에코 시스테에 다국어 지원 통합이다. GraalVM은 JDK에 최적화 컴파일러를 추가하여 성능 최적화와 다중 언어 애플리케이션에 대한 상호 운용성을 제공한다. Java코드 지원 외에도 Scala, Kotlin, Groovy, Clojure, R, Python, Javascript, Ruby등을 추가로 지원한다. 기본적으로 GraalVM을 사용하면 개발자가 단일 애플리케이션에서 여러 언어 및 라이브러리를 효율적으로 실행할 수 있다. GraalVM은 많은 것을 제공한다. Graal? Graal은 오라클 연구소에서 진행하는 프로젝트이다. 2012년부터 개발팀은 GraalVM에 대한 60개 이상의 논문을 발표했다. 이 프로젝트는 매우 오래 지속된 프로젝트이고 성공적으로 보고 있다. 위의 그림에서 Truffle은 GraalVM의 다국어를 전담한다. Javascript, Ruby, R 및 모든 LLVM 언어의 영역이다. LLVM 컴파일러는 C코드를 LLVM 비트 코드로 변환하여 GraalVM에서 실행되게 만든다. GraalVM의 구성 요소 GraalVM을 구성하는 세 가지 구성 요소는 고성능 최적화 Just-In-TIme 컴파일러, 네이티브 실행 파일을 빌드하기 위한 Ahead-of-Time 컴파일러, 다국어 지원이다. GraalVM 컴파일러 (Just-In-Time 컴파일러) Ahead-of-Time 컴파일러 JVM기반 애플리케이션을 기본적으로 실행 가능한 바이너리로 컴파일하는데 사용 다국어 프로그래밍 언어 지원 프로그래밍 언어 인터프린터를 제공한다. 이를 통해 GraalVM을 확장하여 Java 에코 시스템에 언어를 추가할 수 있다. 또한 언어에 구애받지 않는 디버거, 프로파일러 및 힙 뷰어와 같은 도구를 지원한다. JVM 대체제로써의 GraalVM GraalVM은 Java, Scala, Kotlin 및 Java 바이트 코드에서 실행되는 모든 언어를 실행하는 JVM을 대체하려고 한다. 2019년 부터 GraalVM은 Linux상에서 프로덕션 준비가 완료되었다. 그리고 20.1.0 버전에서 Windows도 지원한다고 밝혔다. 여러 언어를 지원한다는 장점이 있지만, 아직까지 성능은 빠른 언어쪽도 있지만, 개별 컴파일러에 미치지는 못한다. 그럼에도 불구하고 GraalVM에 주목을 하는 이유는 무엇일까? 유지 보수 HotSpot컴파일러는 C/C++로 작성되어 있지만, Java로 JVM 컴파일러를 다시 작성하면 새로운 기회가 열린다. 수많은 자바 프로그래머가 GraalVM에 시간을 할애하고 개선에 기여할 것이기 때문이다. V8엔진과 HotSpot 컴파일러는 모두 수십년간 최적화의 어려움을 겪고있다. 개선을 하려면 큰 틀을 깨뜨려야 하는 문제점도 안고 있다. GraalVM은 새로운 아이디어를 바탕으로 이 문제에 대한 새로운 해석을 가지고 있다. 최적화 및 확장성을 염두해두고 만들어졌기 때문이다. 이런 부분들이 트위터가 GraalVM을 채택한 이유중에 하나일 것이다. 트위터는 Scala를 이용해 서비스를 만들고 있고, Scala는 JVM 바이트 코드로 컴파일되는 언어이다. Truffle Truffle는 컴파일러는 만드는 영리한 접근 방식이다. 최적화 Just-In-Time 컴파일러를 사용하면 모든 것을 컴파일하고 최적화한다는 아이디어이다. 인터프리터를 작성하면 인터프리터도 Just-In-Time 컴파일러에 의해 컴파일되고 최적화된다. 이 방식의 장점은 인터프리터이자 Compiler라고 불린다. Graal은 Ruby를 수동으로 최적화된 어셈블리 코드와 거의 비슷한 네이티브 코드로 컴파일한다. Truffle을 사용하면 새로운 프로그래밍 언어를 작성할 수 있다. 각 언어마다 특징이 존재하는데 예를 들어서 동적 타이핑은 Groovy와 Ruby에 의해 유명해졌다. Scala와 Groovy의 출현으로 스트림과 함수형 프로그래밍이 현실화되었다. 향후 Kotlin이 이 아이디어를 채택한 후 마침내 Java8에 적용되었다. Truffle로 프로그래밍 언어를 쉽게 구현할 수 있기 때문에 위와 같은 새로운 개념을 쉽게 사용할 수 있다. Truffle은 괜찮은 프로그래밍 언어를 사용하는데 걸리는 시간을 절반으로 줄여준다. 이는 결국 개발자가 프로그래밍 언어를 잘 선택하도록 도울 수 있다. 클라우드 GraalVM의 가장 큰 핵심은 AOT 컴파일러이다. 20년이 지난 후 Java가 어셈블리 코드로 컴파일 할 수 있게 되었다. 더 중요한 점은 네이티브 코드가 필요한 상황이 존재한다는 것이고 이는 AWS Lambda로 표현되었다. Lambda의 흥미로운 점은 사용량에 따라 비용을 지불한다는 것이다. 코드가 실행되는 경우에만 비용을 지불한다는 의미다. 만약 이를 VM기반으로 구현한다고 가정하면 사용하지 않을 때 VM을 반복해서 종료해야 할 것이다. 그리고 요청이 왔을때 구동을 해야 할 것이다. 이 경우 대략 3초의 시간이 필요하다. 이런 문제를 AOT 컴파일러가 해결 할 수 있다. 일반적으로 Java는 수천 개의 클래스를 로드해야 하기 때문에 느리게 시작한다. 그러나 간단한 CRUD 애플리케이션은 로드된 클래스의 극히 일부만 사용한다. GET 요청에 응답하기 위해 Spring Boot의 모든 기능이 필요하진 않다. AOT 컴파일러는 코드를 최적화하고 컴파일 후 네이티브 코드로 제공된다. Quarkus, Helidon과 같은 클라우드 네이티브 프레임워크를 이용하면 0.005초에 응답하는 Lambda 함수를 만들 수 있다. GraalVM의 가격 GraalVM의 가격은 버전에 따라 달라진다. Community Edition은 오픈 소스이다. Enterprise는 Oracle GraalVM OTN 라이센스 계약 및 Oracle 마스터 라이센스 계약에 따라 사용할 수 있다. 엔터프라이즈 에디션의 가격은 라이센스에 따라 달라진다. Oracle Master License Agreement에 따라 GraalVM Enterprise는 프로덕션 용도로 구입해야 한다. 결론 https://jaxenter.com/graalvm-chris-thalinger-interview-163074.html 에서는 트위터가 GraalVM을 사용하는 이유에 대해서 설명하고 있다. GraalVM은 새로운 마이크로서비스 프레임워크를 촉진하는 것처럼 보인다. 예를 들어, Quarkus는 업계 표준 프레임워크의 모음이며 네이티브 바이너리를 생성할 수 있도록 확장해준다. 앞으로 GraalVM이 클라우드 네이티브 영역과 R, Python 및 Ruby와 같은 프로그래밍 언어에 상당한 영향을 미칠 것으로 기대한다.</summary></entry><entry><title type="html">Spring Native 베타 소개</title><link href="https://giljae.com/blog/2021/04/08/Spring-Native-%EB%B2%A0%ED%83%80-%EC%86%8C%EA%B0%9C.html" rel="alternate" type="text/html" title="Spring Native 베타 소개" /><published>2021-04-08T00:00:00+00:00</published><updated>2021-04-08T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/04/08/Spring%20Native%20%EB%B2%A0%ED%83%80%20%EC%86%8C%EA%B0%9C</id><content type="html" xml:base="https://giljae.com/blog/2021/04/08/Spring-Native-%EB%B2%A0%ED%83%80-%EC%86%8C%EA%B0%9C.html">&lt;p&gt;3/11일에 Spring Native 베타가 릴리즈되었다. GraalVM을 활용하여 Spring Java 및 Kotlin 애플리케이션을 네이티브 이미지로 컴파일하여 JVM에 구동되는 애플리케이션에 비해 시작 시간과 메모리 오버 헤드를 줄인다.&lt;/p&gt;

&lt;p&gt;JVM 실행 파일에 비해 네이티브 이미지는 시작 시간이 더 빠르고 (100ms 미만) 메모리 소비가 적다. 하지만 네이티브 이미지를 빌드하려면 JVM을 이용하는 빌드 대비 더 많은 시간이 필요하다.&lt;/p&gt;

&lt;p&gt;이 프로젝트는 아직 베타 버전이긴 하지만, Spring Framework, Spring Boot, Spring Security 및 Spring Cloud를 포함한 대부분의 Spring 프로젝트 모듈을 지원한다.&lt;/p&gt;

&lt;p&gt;Spring Native는 Java 및 Kotlin 언어를 지원한다. Spring Native가 좋은 선택이 될 수 있는 상황은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud Function을 사용하는 서버리스 애플리케이션&lt;/li&gt;
  &lt;li&gt;Spring을 이용한 마이크로 서비스&lt;/li&gt;
  &lt;li&gt;Kubernetes 환경에서의 애플리케이션&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring Native를 사용하면 개발자는 Java Development Kit, Spring의 필수 기능 및 애플리케이션에 필요한 종속성만으로 최소한의 OS 계층과 네이티브 실행 파일로 최적화된 컨테이너 이미지를 생성할 수 있다. Spring 진영에서는 기존 Spring Boot 애플리케이션을 변형하지 않아도 적용될 수 있게 고려중이다.&lt;/p&gt;

&lt;p&gt;일반 JVM과 Native Image의 주요 차이점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션의 정적 분석이 빌드시 수행된다.&lt;/li&gt;
  &lt;li&gt;사용하지 않는 것은 빌드시 제거된다.&lt;/li&gt;
  &lt;li&gt;리플렉션, 리소스 및 동적 프록시에 대한 구성이 필요하다.&lt;/li&gt;
  &lt;li&gt;클래스 경로는 빌드시 고정된다.&lt;/li&gt;
  &lt;li&gt;클래스 지연 로딩이 없다. → 제공된 모든것이 시작시 메모리에 로드됨&lt;/li&gt;
  &lt;li&gt;일부 코드는 빌드시 실행된다.&lt;/li&gt;
  &lt;li&gt;몇 가지 제한 사항이 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;사전-작업&quot;&gt;사전 작업&lt;/h1&gt;
&lt;p&gt;현재 사용하고 있는 환경이 맥이라서 OSX 기준으로 설명하려 한다.&lt;/p&gt;

&lt;p&gt;SDKMAN를 이용해 GraalVM과 maven을 설치한다.&lt;/p&gt;

&lt;h2 id=&quot;sdkman-설치&quot;&gt;SDKMAN 설치&lt;/h2&gt;
&lt;p&gt;아래의 명령어를 이용해 sdkman을 설치한다.
&lt;script src=&quot;https://gist.github.com/giljae/2a0d099da237447909f4e755777c80f8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;graalvm-설치&quot;&gt;GraalVM 설치&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/giljae/67482419336e269d5bddd6291202c219.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;maven-설치&quot;&gt;Maven 설치&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/giljae/8c53cb3755337c0805439dc2b589a4ff.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;spring-native-boot-strap&quot;&gt;Spring Native Boot strap&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt;에서 프로젝트를 부트 스트랩 할 때 애플리케이션에 Spring Native를 추가 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116084334-a701ec80-a6d8-11eb-9a9d-c6449018a3a7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 프로젝트에는 Spring Native 프로젝트와 애플리케이션 소스 코드를 네이티브 실행 파일로 컴파일하는데 사용되는 Spring AOT 플러그인에 대한 종속성이 포함되며 호환성과 풋 프린트가 향상된다.&lt;/p&gt;

&lt;p&gt;아래는 Maven Script 예시이다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/giljae/2d9e7d7683c22ad7b719bface50db59a.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;spring-webflux로-rest-엔드-포인트-정의&quot;&gt;Spring WebFlux로 REST 엔드 포인트 정의&lt;/h1&gt;
&lt;p&gt;애플리케이션을 테스트할 수 있도록 Spring WebFlux로 REST 엔드 포인트를 정의해보자.&lt;/p&gt;

&lt;p&gt;SpringNativeExampleApplication 클래스, RouterFunction을 사용하여 REST 엔드 포인트를 추가 할 수 있다.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/giljae/bb9152ef0908cc0e2671f4476bec8f72.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;그리고 SpringNativeExampleApplicationTests 클래스에서 REST에 대한 테스트 코드를 작성해보자.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/giljae/06ae8738325f8810472e2b94cad7e72a.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;애플리케이션을-jar로-실행하기&quot;&gt;애플리케이션을 jar로 실행하기&lt;/h1&gt;
&lt;p&gt;프로젝트의 Spring Native 종속성은 Spring AOT 플러그인을 통해 JAR로 실행하는 경우에도 시작 시간과 메모리 소비를 최적화 한다.&lt;/p&gt;

&lt;p&gt;터미널 창을 열고 프로젝트 디렉토리로 이동 후 아래의 명령을 실행한다.
&lt;script src=&quot;https://gist.github.com/giljae/f6b18ccc92f6f7d75b66097b6cc7012b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;정상적으로 구동되었는지 테스트해보자.
&lt;script src=&quot;https://gist.github.com/giljae/c28f31ad783023a3d81780ee41085367.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;jar로 정상 동작되는것을 확인했으니., 이제 네이티브 이미지로 실행해보도록 한다.&lt;/p&gt;

&lt;h1 id=&quot;애플리케이션을-native-이미지로-실행하기&quot;&gt;애플리케이션을 Native 이미지로 실행하기&lt;/h1&gt;
&lt;p&gt;이제 GraalVM과 함께 Spring Native를 활용하여 네이티브 이미지를 빌드하고 실행하자.&lt;/p&gt;

&lt;p&gt;네이티브 이미지를 빌드하는 것은 Spring Boot 플러그인을 사용하면 매우 간단하다. 여기서는 Docker를 이용하지 않고, Native Image를 빌드하는 것으로 설명한다.&lt;/p&gt;

&lt;p&gt;이미 pom.xml에 네이티브 이미지 생성 plugin을 작성했기에, 프로젝트 디렉토리에서 아래의 명령어를 실행한다.
&lt;script src=&quot;https://gist.github.com/giljae/3899b330f88be902379c473708e0ec82.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;많은 시간이 흐른 후, 빌드가 성공하면 프로젝트내 /target 디렉토리 밑에 spring-native-example이라는 파일이 생성된다.&lt;/p&gt;

&lt;p&gt;/target 디렉토리로 이동하여 아래의 명령어를 실행해서 애플리케이션을 구동해보자.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/giljae/7dd6383291be4ae848ce852350372412.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;정상적으로 구동되었는지 테스트 해보자.
&lt;script src=&quot;https://gist.github.com/giljae/e010183709326c563a0df32675fa0f6c.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;p&gt;본 글에서는 Spring Boot 애플리케이션을 빠르게 부트 스트랩하고 Spring Native 및 GraalVM을 사용하여 네이티브 실행 파일로 컴파일하는 방법을 살펴보았다.
위에서 사용된 코드는 &lt;a href=&quot;https://github.com/giljae/sandbox/tree/master/spring-native-example&quot;&gt;이곳&lt;/a&gt;에 올려두었다.
Spring Native 프로젝트에 대한 자세한 정보를 보려면 &lt;a href=&quot;https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/&quot;&gt;공식 문서&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Spring" /><category term="Native" /><summary type="html">3/11일에 Spring Native 베타가 릴리즈되었다. GraalVM을 활용하여 Spring Java 및 Kotlin 애플리케이션을 네이티브 이미지로 컴파일하여 JVM에 구동되는 애플리케이션에 비해 시작 시간과 메모리 오버 헤드를 줄인다. JVM 실행 파일에 비해 네이티브 이미지는 시작 시간이 더 빠르고 (100ms 미만) 메모리 소비가 적다. 하지만 네이티브 이미지를 빌드하려면 JVM을 이용하는 빌드 대비 더 많은 시간이 필요하다. 이 프로젝트는 아직 베타 버전이긴 하지만, Spring Framework, Spring Boot, Spring Security 및 Spring Cloud를 포함한 대부분의 Spring 프로젝트 모듈을 지원한다. Spring Native는 Java 및 Kotlin 언어를 지원한다. Spring Native가 좋은 선택이 될 수 있는 상황은 아래와 같다. Spring Cloud Function을 사용하는 서버리스 애플리케이션 Spring을 이용한 마이크로 서비스 Kubernetes 환경에서의 애플리케이션 Spring Native를 사용하면 개발자는 Java Development Kit, Spring의 필수 기능 및 애플리케이션에 필요한 종속성만으로 최소한의 OS 계층과 네이티브 실행 파일로 최적화된 컨테이너 이미지를 생성할 수 있다. Spring 진영에서는 기존 Spring Boot 애플리케이션을 변형하지 않아도 적용될 수 있게 고려중이다. 일반 JVM과 Native Image의 주요 차이점은 다음과 같다. 애플리케이션의 정적 분석이 빌드시 수행된다. 사용하지 않는 것은 빌드시 제거된다. 리플렉션, 리소스 및 동적 프록시에 대한 구성이 필요하다. 클래스 경로는 빌드시 고정된다. 클래스 지연 로딩이 없다. → 제공된 모든것이 시작시 메모리에 로드됨 일부 코드는 빌드시 실행된다. 몇 가지 제한 사항이 존재한다. 사전 작업 현재 사용하고 있는 환경이 맥이라서 OSX 기준으로 설명하려 한다. SDKMAN를 이용해 GraalVM과 maven을 설치한다. SDKMAN 설치 아래의 명령어를 이용해 sdkman을 설치한다. GraalVM 설치 Maven 설치 Spring Native Boot strap Spring Initializr에서 프로젝트를 부트 스트랩 할 때 애플리케이션에 Spring Native를 추가 할 수 있다. 생성된 프로젝트에는 Spring Native 프로젝트와 애플리케이션 소스 코드를 네이티브 실행 파일로 컴파일하는데 사용되는 Spring AOT 플러그인에 대한 종속성이 포함되며 호환성과 풋 프린트가 향상된다. 아래는 Maven Script 예시이다. Spring WebFlux로 REST 엔드 포인트 정의 애플리케이션을 테스트할 수 있도록 Spring WebFlux로 REST 엔드 포인트를 정의해보자. SpringNativeExampleApplication 클래스, RouterFunction을 사용하여 REST 엔드 포인트를 추가 할 수 있다. 그리고 SpringNativeExampleApplicationTests 클래스에서 REST에 대한 테스트 코드를 작성해보자. 애플리케이션을 jar로 실행하기 프로젝트의 Spring Native 종속성은 Spring AOT 플러그인을 통해 JAR로 실행하는 경우에도 시작 시간과 메모리 소비를 최적화 한다. 터미널 창을 열고 프로젝트 디렉토리로 이동 후 아래의 명령을 실행한다. 정상적으로 구동되었는지 테스트해보자. jar로 정상 동작되는것을 확인했으니., 이제 네이티브 이미지로 실행해보도록 한다. 애플리케이션을 Native 이미지로 실행하기 이제 GraalVM과 함께 Spring Native를 활용하여 네이티브 이미지를 빌드하고 실행하자. 네이티브 이미지를 빌드하는 것은 Spring Boot 플러그인을 사용하면 매우 간단하다. 여기서는 Docker를 이용하지 않고, Native Image를 빌드하는 것으로 설명한다. 이미 pom.xml에 네이티브 이미지 생성 plugin을 작성했기에, 프로젝트 디렉토리에서 아래의 명령어를 실행한다. 많은 시간이 흐른 후, 빌드가 성공하면 프로젝트내 /target 디렉토리 밑에 spring-native-example이라는 파일이 생성된다. /target 디렉토리로 이동하여 아래의 명령어를 실행해서 애플리케이션을 구동해보자. 정상적으로 구동되었는지 테스트 해보자. 결론 본 글에서는 Spring Boot 애플리케이션을 빠르게 부트 스트랩하고 Spring Native 및 GraalVM을 사용하여 네이티브 실행 파일로 컴파일하는 방법을 살펴보았다. 위에서 사용된 코드는 이곳에 올려두었다. Spring Native 프로젝트에 대한 자세한 정보를 보려면 공식 문서를 참조하길 바란다.</summary></entry><entry><title type="html">구독 기반 비즈니스 모델</title><link href="https://giljae.com/blog/2021/03/21/%EA%B5%AC%EB%8F%85-%EA%B8%B0%EB%B0%98-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%AA%A8%EB%8D%B8.html" rel="alternate" type="text/html" title="구독 기반 비즈니스 모델" /><published>2021-03-21T00:00:00+00:00</published><updated>2021-03-21T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/03/21/%EA%B5%AC%EB%8F%85%20%EA%B8%B0%EB%B0%98%20%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4%20%EB%AA%A8%EB%8D%B8</id><content type="html" xml:base="https://giljae.com/blog/2021/03/21/%EA%B5%AC%EB%8F%85-%EA%B8%B0%EB%B0%98-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%AA%A8%EB%8D%B8.html">&lt;p&gt;구독 비즈니스 모델은 소프트웨어 산업의 주요 비즈니스 모델 중 하나지만 지난 몇 년간 다른 Industry에서도 활성화가 많이 되고 있다. 구독 비즈니스 모델은 어디에나 존재한다. Netflix, Apple Music, Youtube, Salesforce.com등 구독 비즈니스는 S&amp;amp;P 500 대비 5배 빠른 수익 성장을 달성하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083088-2e4e6080-a6d7-11eb-8b6e-9dbff956af91.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구독-비즈니스-모델은-무엇인가&quot;&gt;구독 비즈니스 모델은 무엇인가?&lt;/h1&gt;
&lt;p&gt;구독 기반 비즈니스 모델은 제품이나 서비스를 사용하기 위해 고객에게 반복적인 요금(매월 혹은 매년)을 청구하는 비즈니스 모델이다. 즉, 고객과의 거래에서 장기적인 관계 구축 및 반복적인 수익 창출이 핵심이다.&lt;/p&gt;

&lt;p&gt;구독 비즈니스 모델은 새로운 개념이 아니다. 디지털 기술로 인해 구독이 더 쉬워졌고, 결제 프로세스, 고객 관계 관리 시스템등 비즈니스 기능을 근본적으로 변화시켰다.&lt;/p&gt;

&lt;p&gt;PayPal, Strip 및 WePay 같은 디지털 결제 플랫폼을 사용하면 대규모 투자없이 반복 결제를 설정하고 처리 할 수 있다. 이 결과 현재 구독 비즈니스 모델을 사용하는 산업과 비즈니스의 수가 급증했다.&lt;/p&gt;

&lt;p&gt;구독 비즈니스 모델은 디지털 플랫폼 회사인 Netflix, Hulu 및 Amazon Prime, Apple Music, Spotify, Youtube등이 주도적으로 리드하고 있다. 하지만 현재 모든 산업에서 새로운 구독 모델이 만들어지고 있으며, 경쟁 역학을 근본적으로 변화시키고 있다.&lt;/p&gt;

&lt;h1 id=&quot;구독-수익-모델&quot;&gt;구독 수익 모델&lt;/h1&gt;
&lt;p&gt;구독 수익 모델은 복합적인 가치를 활용하는데 도움이 된다. 고객이 회사가 제공하는 가치를 지속적으로 확인하는 한 계속 비용을 지불한다는 의미다.&lt;/p&gt;

&lt;p&gt;잡지, 신문, 물, 얼음, 미용, 의류, 식료품, 반려 동물 사료, 와인, 맥주등 많은 제품이 현재 구독으로 전환되고 있다.&lt;/p&gt;

&lt;h1 id=&quot;구독-비즈니스-모델-현황&quot;&gt;구독 비즈니스 모델 현황&lt;/h1&gt;
&lt;p&gt;구독 모델은 계속해서 인기를 얻고 있다. CAC(고객 확보 비용)는 50%이상 증가했으며 소프트웨어에 대한 지불 의지는 지난 5년동안 꾸준히 감소했다고 한다. 구독을 통해 고객 관계를 활용하기에 지금 이 시점이 매우 좋은 시기이다.&lt;/p&gt;

&lt;p&gt;그리고 이런 구독 모델은 쉽게 사라지지 않을 것이다. MacKinsey의 &lt;a href=&quot;https://www.mckinsey.com/industries/high-tech/our-insights/thinking-inside-the-subscription-box-new-research-on-ecommerce-consumers&quot;&gt;설문 조사&lt;/a&gt;에 따르면 고객의 46%는 이미 온라인 스트리밍 서비스에 비용을 지불하고 15%는 설문 조사 후 1년 이내에 전자 상거래 서비스에 가입을 했다.&lt;/p&gt;

&lt;p&gt;이것이 GoPro 및 Adobe같은 회사가 구독형으로 전환이 이유이기도 하다. 고객에게 지속적으로 가치를 더할 수 있는 가장 신뢰할 수 있는 방법이기도 하기 때문이다. 또한 가격 책정 전략이 장기적인 성공을 위해 어떻게 포지셔닝을 해야하는지 이해하고 있다.&lt;/p&gt;

&lt;h1 id=&quot;구독-기반-비즈니스-예시&quot;&gt;구독 기반 비즈니스 예시&lt;/h1&gt;
&lt;p&gt;구독형 비즈니스 모델을 잘 이해하기 위해서는 성공적인 회사를 살펴 보는 것 이기에 몇 가지를 언급한다.&lt;/p&gt;

&lt;h2 id=&quot;스트리밍-서비스&quot;&gt;스트리밍 서비스&lt;/h2&gt;
&lt;p&gt;콘텐츠 스트리밍 서비스는 아마도 구독 비즈니스 모델중 가장 많이 알려진 케이스일 것이다.&lt;/p&gt;

&lt;p&gt;Netflix, Spotify, Youtube와 같은 회사는 구독의 성장 잠재력을 활용하여 매우 성공적인 비즈니스를 구축했다.&lt;/p&gt;

&lt;p&gt;콘텐츠로 수익을 창출하고 제공하는 엔터테인먼트 경험을 통해 가치를 보여줌으로써 비즈니스를 성공적으로 수행하고 있다. 위에서 언급된 서비스들은 &lt;a href=&quot;https://www.priceintelligently.com/blog/bid/195287/The-Value-Metric-Optimize-Your-Pricing-Strategy-for-High-Growth&quot;&gt;가치 기반 가격 책정&lt;/a&gt;의 훌륭한 예시이다.&lt;/p&gt;

&lt;h2 id=&quot;음식-서비스&quot;&gt;음식 서비스&lt;/h2&gt;
&lt;p&gt;Blue Apron, HelloFresh, 마켓컬리와 같은 Meal-kit 서비스는 편의 기반 구독 모델을 사용하는 예시이다. 이런 방식은 다양한 유형의 식자재 선택과 같은 가치를 제공한다.&lt;/p&gt;

&lt;p&gt;추가 및 상향 판매로 기본 구독 가격을 보완하는 Blue Apron과 HelloFresh는 채식주의자 및 글루텐이 없는 제품에 대해 더 높은 비용을 지불할 의지가 있는 고객에게 선택권을 준다. 이것은 확장 수익을 통해 ARPU를 높이는 방법의 좋은 예이다.&lt;/p&gt;

&lt;h2 id=&quot;자동차&quot;&gt;자동차&lt;/h2&gt;
&lt;p&gt;구매할 자동차를 결정하는 대신 사람들은 렌탈 구독을 사용하고 있다. 구독 모델은 고객이 실제로 구매해야 하는 비용, 책임 및 복잡함 없이 다양한 제품을 소유하고 있다는 느낌을 준다.&lt;/p&gt;

&lt;p&gt;자동차는 주차로 수명의 약 80%를 소비한다. 개인 소유 차량에서 공공 또는 기업이 소유하고 운영하는 서비스로의 전환은 성큼성큼 다가오고 있다. 자율 주행 차량, AI 및 스마트 시티는 도시를 통과하는 방식과 사람들이 이러한 서비스에 대해 지불하는 방식을 혁신하는 효율적인 솔루션을 가능하게 한다.&lt;/p&gt;

&lt;h3 id=&quot;audi&quot;&gt;Audi&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083340-78374680-a6d7-11eb-9fd8-0e7c98643bce.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Audi는 구독 비즈닉스 모델로 이동중이다.&lt;/p&gt;

&lt;p&gt;Audi의 구독 서비스 웹 사이트의 슬로건은 “All of the Power, None of the responsibility”이다. 구독 비즈니스 모델은 소비자에게 걱정할 일이 하나 줄어든다는 약속을 제공한다.&lt;/p&gt;

&lt;h3 id=&quot;nissan&quot;&gt;Nissan&lt;/h3&gt;
&lt;p&gt;Nissan은 2계층 구독 비즈니스 모델을 시작했다. 첫 번째 계층은 월 699달러이며 Altima, Rogue, Pathfinder 및 Frontier를 선택할 수 있다. 구독료에는 보험, 긴급 출동 지원, 정기 유지 보수, 청소 및 배송이 포함된다.&lt;/p&gt;

&lt;p&gt;두번째 계층에는 몇 가지 흥미로운 선택 사항이 존재한다. 그중 하나는 GT-R이다. 월 899달러에 Maxima, Murano, Armada, Titan, 370Z, Leaf Plus 및 GT-R로 교환 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;항공사&quot;&gt;항공사&lt;/h2&gt;
&lt;p&gt;COVID-19로 인해 가치가 많이 하락하긴 했지만, 항공사의 구독 모델은 두 가지 가치를 제안한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빈번한 여행자를 위한 저렴한 여행&lt;/li&gt;
  &lt;li&gt;공항에서 보내는 시간 단축의 약속&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;두 가지 유형의 구독 모델이 제공된다.&lt;/p&gt;

&lt;p&gt;첫 번째는 항공편을 제공하고 두 번째는 항공편을 제외하지만 프리미엄 서비스와 수당을 제공한다.&lt;/p&gt;

&lt;p&gt;예를 들어서, 델타 스카이 마일스 셀렉트는 특전, 음료 바우처, 우선 탑승 및 기내 선반 공간 보장을 년 59달러에 제공한다.&lt;/p&gt;

&lt;p&gt;유나이티드, 젯 블루, 사우스 웨스트는 우선 탑승 및 기내 선반 이용과 같은 특전에 대해 구독을 제공한다.&lt;/p&gt;

&lt;h3 id=&quot;flyline&quot;&gt;FlyLine&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083450-93a25180-a6d7-11eb-83b6-777eecbb5f29.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FlyLine은 구독자의 티켓 비용 절감에 중점을 둔다. 년 49.99달러의 기본 구독 또는 년 79.99달러의 프리미엄 구독을 제공한다.&lt;/p&gt;

&lt;p&gt;이 회사는 구독한 고객이 국내 예약에서 평균 10~15%, 국제 예약에서 20~60%를 절약한다고 얘기한다.&lt;/p&gt;

&lt;h3 id=&quot;surf-air&quot;&gt;Surf Air&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083515-a1f06d80-a6d7-11eb-915d-eb73d1dc9d6a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Surf Air는 캘리포니아의 “개인 항공 여행 멤버십”이라고 스스로를 칭한다. 고객에게 월 1950달러에 개인 비행기로 무제한 비행을 제공하며 일반 비행기보다 더 효율적인 서비스라고 얘기한다.&lt;/p&gt;

&lt;h2 id=&quot;fitness&quot;&gt;Fitness&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083552-ac126c00-a6d7-11eb-90d4-de9769bcceac.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;피트니스 분야에서는 Fitbit을 얘기할 수 있다.&lt;/p&gt;

&lt;p&gt;Fitbit Premium은 월 79.99달러에 개인화된 목표, 도전, 코칭 및 가이드를 제공한다. 하지만 하드웨어(스마트밴드)와 결합하는 움직임은 보이지 않는다.&lt;/p&gt;

&lt;p&gt;더 매력적인 가치 제안은 스마트밴드를 더 높은 가격에 패키지와 함께 묶는 방법이다. 그러나 많은 회사에서는 일반적으로 판매 및 수익을 잠식시키는 것에 대한 두려움이 있다.&lt;/p&gt;

&lt;p&gt;하드웨어 소유자에게만 제공되는 서비스를 구축하려는 Apple의 전략과 마찬가지로 Fitbit은 사용자의 충성도를 유지하는 서비스를 구축하고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;game&quot;&gt;Game&lt;/h2&gt;
&lt;p&gt;게임은 과거로 부터 현재까지 이미 구독에 대해서 많이 활성화 되어 있었다. 게임은 개별 게임을 구매하는 대신 다양한 게임에 대한 Access를 제공하는 구독 비즈니스 모델로 전환되었다.&lt;/p&gt;

&lt;p&gt;게임 산업의 탈 중개화는 음악 산업과 동일한 경로를 따라가고 있다. 비디오 게임을 소유하는 것은 게임을 플레이하는 사람에게 다양성을 제공할 수 없다라는 점에서 현재는 의미가 없어 보인다. 이 점이 구독으로 변화시키는데 핵심 요인이 되었다.&lt;/p&gt;

&lt;h3 id=&quot;xbox-게임-패스&quot;&gt;XBox 게임 패스&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083589-bcc2e200-a6d7-11eb-9b8e-44af5ed9e424.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xbox Game Pass는 구독자에게 월 10달러에 100개 이상의 게임에 대한 접근을 제공한다. 마이크로소프트는 구독자 수를 공개하지 않았지만, 일부 보고서에서는 월간 6천5백만명의 플레이가 존재한다고 언급되어 있다.&lt;/p&gt;

&lt;p&gt;현재 Xbox One, Windows 10, iOS 및 Android를 포함한 모든 Xbox 게임 플랫폼에서 6400만 명의 활성 Xbox Live 사용자가 존재한다. Xbox Game Pass에는 950만명 이상의 구독자가 있는 것으로 보고 되었다.&lt;/p&gt;

&lt;h3 id=&quot;playstation-now&quot;&gt;Playstation Now&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083631-cc422b00-a6d7-11eb-8ac3-c26a6955d3b9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PlayStation Now는 월 9.99 또는 년 59.99에 사용할 수 있는 650개의 게임을 제공한다.&lt;/p&gt;

&lt;p&gt;Sony는 2019년 10월말에 PlayStation Now의 구독자 수를 100만명으로 설정했고 이는 6개월전 구독자 70만명에서 40% 증가한 수치이다.&lt;/p&gt;

&lt;h2 id=&quot;주택-유지-관리&quot;&gt;주택 유지 관리&lt;/h2&gt;
&lt;p&gt;시간 절약은 고객에게 제공할 수 있는 강력한 가치 제안중 하나이다. 주택 유지 보수는 주택 수리에 대한 지식과 시간이 없는 사람들에게 매우 매력적이다.&lt;/p&gt;

&lt;h3 id=&quot;super&quot;&gt;Super&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116083676-de23ce00-a6d7-11eb-8fbf-01dba6943e74.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Super는 월별 또는 연간 요금을 부과한다. 주택 유지 보수 및 수리비는 구독료에 포함되어 있다.&lt;/p&gt;

&lt;h2 id=&quot;엔터테인먼트&quot;&gt;엔터테인먼트&lt;/h2&gt;
&lt;p&gt;엔터테인먼트는 범위가 크지만 일반적으로 영화, 비디오에 대한 온라인 스트리밍 서비스를 포함한다. 구독료 기반 비즈니스에서 가장 경쟁이 치열한 시장이며 Netflix, Amazon, Apple 및 Youtube와 같은 대규모 플레이어가 있다.&lt;/p&gt;

&lt;p&gt;10년전만 해도 수천만명의 사람들이 비디오 스트리밍을 사용했지만, 현재는 10억명이 넘게 사용하고 있다. 기존에는 Vod 사업자가 콘텐츠에 요금을 부과하는 형태로 사업을 진행했지만, Netflix를 필두로 월정액 기반으로 모델이 수립되었고 이 후 새로운 경쟁 업체들은 이런 형태로 사업을 진행하고 있다.&lt;/p&gt;

&lt;h1 id=&quot;투자자들이-구독-비즈니스-모델을-좋아하는-이유&quot;&gt;투자자들이 구독 비즈니스 모델을 좋아하는 이유&lt;/h1&gt;
&lt;p&gt;구독 비즈니스 모델은 예측 가능한 수익과 확장 가능한 모델을 제공한다. 이 모델이 실행되면 플라이휠 효과를 생성하기에 추진력을 얻게된다. 그리고 대규모 고객 기반의 네트워크 효과는 엄청난 파급력과 효율성을 제공하게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;회사가 구독자를 확보하면 고객 유지, 고객 가치 및 해지율로 관심을 전환한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구독 비즈니스는 수익, 성장을 추적하고 예측하기가 쉽다.&lt;/p&gt;

&lt;p&gt;또한 기업은 고객을 훨씬 더 잘 파악하고 전체적으로 더 많은 데이터를 수집할 수 있다. 구독 모델은 더 깊은 고객 통찰력을 제공할 수 있다.&lt;/p&gt;

&lt;p&gt;고객과의 상호 작용이 일회성 구매로 제한되면 소비자 행동과 선호도에 대한 미묘한 차이로 인해 성향을 파악하기가 매우 어렵게 된다.&lt;/p&gt;

&lt;p&gt;결과적으로 데이터는 고객 확보를 위한 프로파일링 및 타겟팅을 개선하게 된다.&lt;/p&gt;

&lt;p&gt;정기 결제를 기반으로 하기 때문에 비즈니스 리더와 주주가 전략적 계획 및 투자 관점에서 신뢰할 수 있는 예측 가능한 수익을 제공할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 통찰력은 제품 변경 및 신제품 그리고 마케팅에 이르기까지 사업 기회에 대해 의사결정시 참고할 수 있게한다.&lt;/p&gt;

&lt;p&gt;소비자는 일반적으로 구독 서비스 가입 후 유지하는 경향이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;구독은 이탈 환경이 아니라 유지인 환경을 만들기 때문에 강력한 비즈니스 모델이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;구독-가격-모델은-비즈니스에-어떤-이점을-제공하는가&quot;&gt;구독 가격 모델은 비즈니스에 어떤 이점을 제공하는가?&lt;/h1&gt;
&lt;p&gt;구독 기반 비즈니스 모델은 반복되는 수익에 대해 예측이 가능하고 변동될 수 있는 주문형 구매보다 가치가 훨씬 높기 때문에 매력적이다.&lt;/p&gt;

&lt;p&gt;구독 기반의 서비스를 제공하면 정기적으로 사용자와 의사 소통할 이유가 많기 때문에 더 강력한 고객 관계를 구축할 수 있고, 고객은 낮은 임계 장벽으로 인해 혜택을 받게 된다. 예를 들어 구독은 연간 전체 지불보다 비용이 저렴하고 고객이 언제든지 쉽게 서비스를 취소 할 수 있기 때문에 개부분의 경우 위험이 줄어들게 된다.&lt;/p&gt;

&lt;h1 id=&quot;구독-비즈니스-모델은-어떻게-작동하는가&quot;&gt;구독 비즈니스 모델은 어떻게 작동하는가?&lt;/h1&gt;
&lt;p&gt;기본적인 아이디어는 고정 거래 비용을 받는 것에서 제품 또는 서비스에 대한 반복 청구로 전환하는 것이다. 디지털 제품/서비스의 경우 한계 비용이 낮거나 거의 0에 가깝기 때문에 전환은 쉽다.&lt;/p&gt;

&lt;p&gt;구독 비즈니스 모델은 거래 비용에서 반복 수익으로 이동하는 방식으로 작동된다. 처음에는 수익이 적은 금액으로 진행될 것이지만, 리소스와 비용이 재정렬이되면 장기적으로는 상황이 역전된다.&lt;/p&gt;

&lt;p&gt;고객이 대규모로 추가 될 수 있고 지속적인 구독을 하는 고객의 가치가 단일 거래 고객보다 높기 때문에 수익이 증가한다. 기본적으로 이는 SaaS형태의 Multi-tenant기반이어야 하며 이렇게 구축이 되어야 비용이 감소하고 저렴하게 확장할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;구독-비즈니스-모델로-전환시-처음-수익-감소-후-비용이-증가하는-이유는&quot;&gt;구독 비즈니스 모델로 전환시 처음 수익 감소 후 비용이 증가하는 이유는?&lt;/h1&gt;
&lt;p&gt;전통적인 파이프라인에서의 수익은 일회성 판매를 통해 모든 것을 인정 받는다. 그러나 구독 비즈니스에서의 수익은 계약 기간 동안 더 작은 단위(e.g 월정액)로 인식된다. 회사가 SaaS 제품에 투자함에 따라 비용이 증가하게 된다.&lt;/p&gt;

&lt;p&gt;그러나 장기적으로는 상황이 역전된다. 수익은 향후 고객 기반이 증가하고 비즈니스 모델이 확장되기 시작함에 따라 증가한다. 이런 터닝 포인트가 지나면 비용은 감소하게 된다.&lt;/p&gt;

&lt;p&gt;구독 비즈니스 모델 개발에는 현재 비즈니스 모델을 구독 모델로 전환하여 새로운 가치를 창출하는 방법과 정의가 포함된다.&lt;/p&gt;

&lt;p&gt;조직의 SPVM(Sourcing, Procurement and Vendor Management)요소가 구독 비즈니스 모델에 어떻게 부합하는지 평가해야 한다. 여기에는 새로운 조달 자원, 활동 및 파트너로의 전환이 포함될 수 있다.&lt;/p&gt;

&lt;p&gt;즉 전체 P&amp;amp;L 분석을 수행해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;왜-구독-비즈니스-모델을-선호하는가&quot;&gt;왜 구독 비즈니스 모델을 선호하는가?&lt;/h1&gt;
&lt;p&gt;구독 비즈니스 모델로의 전환은 고객과 함께 시작된다. 고객 동향과 행동을 이해해야 성공에 다가설 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사람들은 교통 수단을 원하지만 우버 또는 쏘카를 통해 차량을 이용할 수 있는 준비가 되어 있다면 소유에 신경쓰지 않는다. (공유 경제)&lt;/li&gt;
  &lt;li&gt;성공적인 구독 비즈니스는 거래가 아닌 고객 경험과 관계를 기반으로 한다. 경험과 관계가 결합되어야 장기적인 가치를 창출할 수 있다.&lt;/li&gt;
  &lt;li&gt;구독은 반복적인 수익을 창출한다. 고객이 만족하고 이탈하지 않으면 구독 비즈니스는 성공이다.&lt;/li&gt;
  &lt;li&gt;솔루션/제품 회사는 구독 회사가 될 수 있다. 디지털 제품에서는 더 쉽게 할 수 있다.&lt;/li&gt;
  &lt;li&gt;반복되는 마진이 클수록 성장에 더 많은 비용을 쓸 수 있다. 수익 성장을 위해서는 그만한 가치가 있다.&lt;/li&gt;
  &lt;li&gt;고객 경험은 지속 가능한 경쟁 우위를 창출하는데 매우 중요한 방법이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;구독-비즈니스로-전환하는-방법&quot;&gt;구독 비즈니스로 전환하는 방법&lt;/h1&gt;
&lt;p&gt;구독 비즈니스 모델로의 전환은 4단계를 거쳐야 한다.&lt;/p&gt;

&lt;p&gt;첫번째는 이점을 창출할 수 있는 전략을 개발하는 것이다. 즉, 어떤 새로운 가치를 창출 할 수 있는지 탐구하는 것이다.&lt;/p&gt;

&lt;p&gt;두번째는 고객 경험을 제공하고 관계를 구축하기 위해 회사내에서 어떤 변화가 필요한지 측정하고 범위를 정하는 것이다.&lt;/p&gt;

&lt;p&gt;세번째는 기능, 기술, 자원의 범위를 지정하는 것이다.&lt;/p&gt;

&lt;p&gt;네번째는 시장 적합성과 가치를 최적화하기 위해 Agile 하게 실행하는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행 없이 이루어지는 것은 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;주의할-점&quot;&gt;주의할 점?&lt;/h1&gt;
&lt;p&gt;구독 기반으로 비즈니스를 하는 회사가 많아져서 소비자들이 피로도를 느끼고 있다. (다수의 구독을 관리하는데 피로도가 크다.)&lt;/p&gt;

&lt;p&gt;결국 고객에게 선택권을 주어야 하고 고객이 당신의 제안을 반복적으로 받을 수 있는지에 대해 고민해야 한다. 그렇지 않다면 그들은 다른 곳으로 떠날 것이다.&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Business" /><summary type="html">구독 비즈니스 모델은 소프트웨어 산업의 주요 비즈니스 모델 중 하나지만 지난 몇 년간 다른 Industry에서도 활성화가 많이 되고 있다. 구독 비즈니스 모델은 어디에나 존재한다. Netflix, Apple Music, Youtube, Salesforce.com등 구독 비즈니스는 S&amp;amp;P 500 대비 5배 빠른 수익 성장을 달성하고 있다. 구독 비즈니스 모델은 무엇인가? 구독 기반 비즈니스 모델은 제품이나 서비스를 사용하기 위해 고객에게 반복적인 요금(매월 혹은 매년)을 청구하는 비즈니스 모델이다. 즉, 고객과의 거래에서 장기적인 관계 구축 및 반복적인 수익 창출이 핵심이다. 구독 비즈니스 모델은 새로운 개념이 아니다. 디지털 기술로 인해 구독이 더 쉬워졌고, 결제 프로세스, 고객 관계 관리 시스템등 비즈니스 기능을 근본적으로 변화시켰다. PayPal, Strip 및 WePay 같은 디지털 결제 플랫폼을 사용하면 대규모 투자없이 반복 결제를 설정하고 처리 할 수 있다. 이 결과 현재 구독 비즈니스 모델을 사용하는 산업과 비즈니스의 수가 급증했다. 구독 비즈니스 모델은 디지털 플랫폼 회사인 Netflix, Hulu 및 Amazon Prime, Apple Music, Spotify, Youtube등이 주도적으로 리드하고 있다. 하지만 현재 모든 산업에서 새로운 구독 모델이 만들어지고 있으며, 경쟁 역학을 근본적으로 변화시키고 있다. 구독 수익 모델 구독 수익 모델은 복합적인 가치를 활용하는데 도움이 된다. 고객이 회사가 제공하는 가치를 지속적으로 확인하는 한 계속 비용을 지불한다는 의미다. 잡지, 신문, 물, 얼음, 미용, 의류, 식료품, 반려 동물 사료, 와인, 맥주등 많은 제품이 현재 구독으로 전환되고 있다. 구독 비즈니스 모델 현황 구독 모델은 계속해서 인기를 얻고 있다. CAC(고객 확보 비용)는 50%이상 증가했으며 소프트웨어에 대한 지불 의지는 지난 5년동안 꾸준히 감소했다고 한다. 구독을 통해 고객 관계를 활용하기에 지금 이 시점이 매우 좋은 시기이다. 그리고 이런 구독 모델은 쉽게 사라지지 않을 것이다. MacKinsey의 설문 조사에 따르면 고객의 46%는 이미 온라인 스트리밍 서비스에 비용을 지불하고 15%는 설문 조사 후 1년 이내에 전자 상거래 서비스에 가입을 했다. 이것이 GoPro 및 Adobe같은 회사가 구독형으로 전환이 이유이기도 하다. 고객에게 지속적으로 가치를 더할 수 있는 가장 신뢰할 수 있는 방법이기도 하기 때문이다. 또한 가격 책정 전략이 장기적인 성공을 위해 어떻게 포지셔닝을 해야하는지 이해하고 있다. 구독 기반 비즈니스 예시 구독형 비즈니스 모델을 잘 이해하기 위해서는 성공적인 회사를 살펴 보는 것 이기에 몇 가지를 언급한다. 스트리밍 서비스 콘텐츠 스트리밍 서비스는 아마도 구독 비즈니스 모델중 가장 많이 알려진 케이스일 것이다. Netflix, Spotify, Youtube와 같은 회사는 구독의 성장 잠재력을 활용하여 매우 성공적인 비즈니스를 구축했다. 콘텐츠로 수익을 창출하고 제공하는 엔터테인먼트 경험을 통해 가치를 보여줌으로써 비즈니스를 성공적으로 수행하고 있다. 위에서 언급된 서비스들은 가치 기반 가격 책정의 훌륭한 예시이다. 음식 서비스 Blue Apron, HelloFresh, 마켓컬리와 같은 Meal-kit 서비스는 편의 기반 구독 모델을 사용하는 예시이다. 이런 방식은 다양한 유형의 식자재 선택과 같은 가치를 제공한다. 추가 및 상향 판매로 기본 구독 가격을 보완하는 Blue Apron과 HelloFresh는 채식주의자 및 글루텐이 없는 제품에 대해 더 높은 비용을 지불할 의지가 있는 고객에게 선택권을 준다. 이것은 확장 수익을 통해 ARPU를 높이는 방법의 좋은 예이다. 자동차 구매할 자동차를 결정하는 대신 사람들은 렌탈 구독을 사용하고 있다. 구독 모델은 고객이 실제로 구매해야 하는 비용, 책임 및 복잡함 없이 다양한 제품을 소유하고 있다는 느낌을 준다. 자동차는 주차로 수명의 약 80%를 소비한다. 개인 소유 차량에서 공공 또는 기업이 소유하고 운영하는 서비스로의 전환은 성큼성큼 다가오고 있다. 자율 주행 차량, AI 및 스마트 시티는 도시를 통과하는 방식과 사람들이 이러한 서비스에 대해 지불하는 방식을 혁신하는 효율적인 솔루션을 가능하게 한다. Audi Audi는 구독 비즈닉스 모델로 이동중이다. Audi의 구독 서비스 웹 사이트의 슬로건은 “All of the Power, None of the responsibility”이다. 구독 비즈니스 모델은 소비자에게 걱정할 일이 하나 줄어든다는 약속을 제공한다. Nissan Nissan은 2계층 구독 비즈니스 모델을 시작했다. 첫 번째 계층은 월 699달러이며 Altima, Rogue, Pathfinder 및 Frontier를 선택할 수 있다. 구독료에는 보험, 긴급 출동 지원, 정기 유지 보수, 청소 및 배송이 포함된다. 두번째 계층에는 몇 가지 흥미로운 선택 사항이 존재한다. 그중 하나는 GT-R이다. 월 899달러에 Maxima, Murano, Armada, Titan, 370Z, Leaf Plus 및 GT-R로 교환 할 수 있다. 항공사 COVID-19로 인해 가치가 많이 하락하긴 했지만, 항공사의 구독 모델은 두 가지 가치를 제안한다. 빈번한 여행자를 위한 저렴한 여행 공항에서 보내는 시간 단축의 약속 두 가지 유형의 구독 모델이 제공된다. 첫 번째는 항공편을 제공하고 두 번째는 항공편을 제외하지만 프리미엄 서비스와 수당을 제공한다. 예를 들어서, 델타 스카이 마일스 셀렉트는 특전, 음료 바우처, 우선 탑승 및 기내 선반 공간 보장을 년 59달러에 제공한다. 유나이티드, 젯 블루, 사우스 웨스트는 우선 탑승 및 기내 선반 이용과 같은 특전에 대해 구독을 제공한다. FlyLine FlyLine은 구독자의 티켓 비용 절감에 중점을 둔다. 년 49.99달러의 기본 구독 또는 년 79.99달러의 프리미엄 구독을 제공한다. 이 회사는 구독한 고객이 국내 예약에서 평균 10~15%, 국제 예약에서 20~60%를 절약한다고 얘기한다. Surf Air Surf Air는 캘리포니아의 “개인 항공 여행 멤버십”이라고 스스로를 칭한다. 고객에게 월 1950달러에 개인 비행기로 무제한 비행을 제공하며 일반 비행기보다 더 효율적인 서비스라고 얘기한다. Fitness 피트니스 분야에서는 Fitbit을 얘기할 수 있다. Fitbit Premium은 월 79.99달러에 개인화된 목표, 도전, 코칭 및 가이드를 제공한다. 하지만 하드웨어(스마트밴드)와 결합하는 움직임은 보이지 않는다. 더 매력적인 가치 제안은 스마트밴드를 더 높은 가격에 패키지와 함께 묶는 방법이다. 그러나 많은 회사에서는 일반적으로 판매 및 수익을 잠식시키는 것에 대한 두려움이 있다. 하드웨어 소유자에게만 제공되는 서비스를 구축하려는 Apple의 전략과 마찬가지로 Fitbit은 사용자의 충성도를 유지하는 서비스를 구축하고자 한다. Game 게임은 과거로 부터 현재까지 이미 구독에 대해서 많이 활성화 되어 있었다. 게임은 개별 게임을 구매하는 대신 다양한 게임에 대한 Access를 제공하는 구독 비즈니스 모델로 전환되었다. 게임 산업의 탈 중개화는 음악 산업과 동일한 경로를 따라가고 있다. 비디오 게임을 소유하는 것은 게임을 플레이하는 사람에게 다양성을 제공할 수 없다라는 점에서 현재는 의미가 없어 보인다. 이 점이 구독으로 변화시키는데 핵심 요인이 되었다. XBox 게임 패스 Xbox Game Pass는 구독자에게 월 10달러에 100개 이상의 게임에 대한 접근을 제공한다. 마이크로소프트는 구독자 수를 공개하지 않았지만, 일부 보고서에서는 월간 6천5백만명의 플레이가 존재한다고 언급되어 있다. 현재 Xbox One, Windows 10, iOS 및 Android를 포함한 모든 Xbox 게임 플랫폼에서 6400만 명의 활성 Xbox Live 사용자가 존재한다. Xbox Game Pass에는 950만명 이상의 구독자가 있는 것으로 보고 되었다. Playstation Now PlayStation Now는 월 9.99 또는 년 59.99에 사용할 수 있는 650개의 게임을 제공한다. Sony는 2019년 10월말에 PlayStation Now의 구독자 수를 100만명으로 설정했고 이는 6개월전 구독자 70만명에서 40% 증가한 수치이다. 주택 유지 관리 시간 절약은 고객에게 제공할 수 있는 강력한 가치 제안중 하나이다. 주택 유지 보수는 주택 수리에 대한 지식과 시간이 없는 사람들에게 매우 매력적이다. Super Super는 월별 또는 연간 요금을 부과한다. 주택 유지 보수 및 수리비는 구독료에 포함되어 있다. 엔터테인먼트 엔터테인먼트는 범위가 크지만 일반적으로 영화, 비디오에 대한 온라인 스트리밍 서비스를 포함한다. 구독료 기반 비즈니스에서 가장 경쟁이 치열한 시장이며 Netflix, Amazon, Apple 및 Youtube와 같은 대규모 플레이어가 있다. 10년전만 해도 수천만명의 사람들이 비디오 스트리밍을 사용했지만, 현재는 10억명이 넘게 사용하고 있다. 기존에는 Vod 사업자가 콘텐츠에 요금을 부과하는 형태로 사업을 진행했지만, Netflix를 필두로 월정액 기반으로 모델이 수립되었고 이 후 새로운 경쟁 업체들은 이런 형태로 사업을 진행하고 있다. 투자자들이 구독 비즈니스 모델을 좋아하는 이유 구독 비즈니스 모델은 예측 가능한 수익과 확장 가능한 모델을 제공한다. 이 모델이 실행되면 플라이휠 효과를 생성하기에 추진력을 얻게된다. 그리고 대규모 고객 기반의 네트워크 효과는 엄청난 파급력과 효율성을 제공하게 된다. 회사가 구독자를 확보하면 고객 유지, 고객 가치 및 해지율로 관심을 전환한다. 구독 비즈니스는 수익, 성장을 추적하고 예측하기가 쉽다. 또한 기업은 고객을 훨씬 더 잘 파악하고 전체적으로 더 많은 데이터를 수집할 수 있다. 구독 모델은 더 깊은 고객 통찰력을 제공할 수 있다. 고객과의 상호 작용이 일회성 구매로 제한되면 소비자 행동과 선호도에 대한 미묘한 차이로 인해 성향을 파악하기가 매우 어렵게 된다. 결과적으로 데이터는 고객 확보를 위한 프로파일링 및 타겟팅을 개선하게 된다. 정기 결제를 기반으로 하기 때문에 비즈니스 리더와 주주가 전략적 계획 및 투자 관점에서 신뢰할 수 있는 예측 가능한 수익을 제공할 수 있다. 이러한 통찰력은 제품 변경 및 신제품 그리고 마케팅에 이르기까지 사업 기회에 대해 의사결정시 참고할 수 있게한다. 소비자는 일반적으로 구독 서비스 가입 후 유지하는 경향이 있다. 구독은 이탈 환경이 아니라 유지인 환경을 만들기 때문에 강력한 비즈니스 모델이다. 구독 가격 모델은 비즈니스에 어떤 이점을 제공하는가? 구독 기반 비즈니스 모델은 반복되는 수익에 대해 예측이 가능하고 변동될 수 있는 주문형 구매보다 가치가 훨씬 높기 때문에 매력적이다. 구독 기반의 서비스를 제공하면 정기적으로 사용자와 의사 소통할 이유가 많기 때문에 더 강력한 고객 관계를 구축할 수 있고, 고객은 낮은 임계 장벽으로 인해 혜택을 받게 된다. 예를 들어 구독은 연간 전체 지불보다 비용이 저렴하고 고객이 언제든지 쉽게 서비스를 취소 할 수 있기 때문에 개부분의 경우 위험이 줄어들게 된다. 구독 비즈니스 모델은 어떻게 작동하는가? 기본적인 아이디어는 고정 거래 비용을 받는 것에서 제품 또는 서비스에 대한 반복 청구로 전환하는 것이다. 디지털 제품/서비스의 경우 한계 비용이 낮거나 거의 0에 가깝기 때문에 전환은 쉽다. 구독 비즈니스 모델은 거래 비용에서 반복 수익으로 이동하는 방식으로 작동된다. 처음에는 수익이 적은 금액으로 진행될 것이지만, 리소스와 비용이 재정렬이되면 장기적으로는 상황이 역전된다. 고객이 대규모로 추가 될 수 있고 지속적인 구독을 하는 고객의 가치가 단일 거래 고객보다 높기 때문에 수익이 증가한다. 기본적으로 이는 SaaS형태의 Multi-tenant기반이어야 하며 이렇게 구축이 되어야 비용이 감소하고 저렴하게 확장할 수 있다. 구독 비즈니스 모델로 전환시 처음 수익 감소 후 비용이 증가하는 이유는? 전통적인 파이프라인에서의 수익은 일회성 판매를 통해 모든 것을 인정 받는다. 그러나 구독 비즈니스에서의 수익은 계약 기간 동안 더 작은 단위(e.g 월정액)로 인식된다. 회사가 SaaS 제품에 투자함에 따라 비용이 증가하게 된다. 그러나 장기적으로는 상황이 역전된다. 수익은 향후 고객 기반이 증가하고 비즈니스 모델이 확장되기 시작함에 따라 증가한다. 이런 터닝 포인트가 지나면 비용은 감소하게 된다. 구독 비즈니스 모델 개발에는 현재 비즈니스 모델을 구독 모델로 전환하여 새로운 가치를 창출하는 방법과 정의가 포함된다. 조직의 SPVM(Sourcing, Procurement and Vendor Management)요소가 구독 비즈니스 모델에 어떻게 부합하는지 평가해야 한다. 여기에는 새로운 조달 자원, 활동 및 파트너로의 전환이 포함될 수 있다. 즉 전체 P&amp;amp;L 분석을 수행해야 한다. 왜 구독 비즈니스 모델을 선호하는가? 구독 비즈니스 모델로의 전환은 고객과 함께 시작된다. 고객 동향과 행동을 이해해야 성공에 다가설 수 있다. 사람들은 교통 수단을 원하지만 우버 또는 쏘카를 통해 차량을 이용할 수 있는 준비가 되어 있다면 소유에 신경쓰지 않는다. (공유 경제) 성공적인 구독 비즈니스는 거래가 아닌 고객 경험과 관계를 기반으로 한다. 경험과 관계가 결합되어야 장기적인 가치를 창출할 수 있다. 구독은 반복적인 수익을 창출한다. 고객이 만족하고 이탈하지 않으면 구독 비즈니스는 성공이다. 솔루션/제품 회사는 구독 회사가 될 수 있다. 디지털 제품에서는 더 쉽게 할 수 있다. 반복되는 마진이 클수록 성장에 더 많은 비용을 쓸 수 있다. 수익 성장을 위해서는 그만한 가치가 있다. 고객 경험은 지속 가능한 경쟁 우위를 창출하는데 매우 중요한 방법이다. 구독 비즈니스로 전환하는 방법 구독 비즈니스 모델로의 전환은 4단계를 거쳐야 한다. 첫번째는 이점을 창출할 수 있는 전략을 개발하는 것이다. 즉, 어떤 새로운 가치를 창출 할 수 있는지 탐구하는 것이다. 두번째는 고객 경험을 제공하고 관계를 구축하기 위해 회사내에서 어떤 변화가 필요한지 측정하고 범위를 정하는 것이다. 세번째는 기능, 기술, 자원의 범위를 지정하는 것이다. 네번째는 시장 적합성과 가치를 최적화하기 위해 Agile 하게 실행하는 것이다. 실행 없이 이루어지는 것은 없다. 주의할 점? 구독 기반으로 비즈니스를 하는 회사가 많아져서 소비자들이 피로도를 느끼고 있다. (다수의 구독을 관리하는데 피로도가 크다.) 결국 고객에게 선택권을 주어야 하고 고객이 당신의 제안을 반복적으로 받을 수 있는지에 대해 고민해야 한다. 그렇지 않다면 그들은 다른 곳으로 떠날 것이다.</summary></entry><entry><title type="html">넷플릭스의 확장 가능한 플랫폼 만들기</title><link href="https://giljae.com/blog/2021/02/27/%EB%84%B7%ED%94%8C%EB%A6%AD%EC%8A%A4%EC%9D%98-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="넷플릭스의 확장 가능한 플랫폼 만들기" /><published>2021-02-27T00:00:00+00:00</published><updated>2021-02-27T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/02/27/%EB%84%B7%ED%94%8C%EB%A6%AD%EC%8A%A4%EC%9D%98%20%ED%99%95%EC%9E%A5%20%EA%B0%80%EB%8A%A5%ED%95%9C%20%ED%94%8C%EB%9E%AB%ED%8F%BC%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="https://giljae.com/blog/2021/02/27/%EB%84%B7%ED%94%8C%EB%A6%AD%EC%8A%A4%EC%9D%98-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0.html">&lt;p&gt;본 글은 Netflix Tech 블로그의 &lt;a href=&quot;https://netflixtechblog.com/growth-engineering-at-netflix-creating-a-scalable-offers-platform-69330136dd87&quot;&gt;글&lt;/a&gt;을 의역하여 작성한 글입니다.&lt;/p&gt;

&lt;h1 id=&quot;배경&quot;&gt;배경&lt;/h1&gt;
&lt;p&gt;Netflix는 지난 10년 간 주문형 스트리밍 비디오 서비스를 제공하고 있습니다. 서비스를 제공하는 기간동아 Netflix는 전 세계 고객 확보를 위해 30일간 무료 평가판과 결합된 3가지 요금제(기본, 표준, 프리미엄)에 의존했습니다. 하지만 지금 세상은 과거에 비해 많이 변했습니다. 사람들의 여가 시간을 채울 경쟁이 증가하고 있고 디바이스 생태계가 경이적으로 성장했으며 소비자는 언제 어디서나 원하는 디바이스로 콘텐츠를 시청하기를 원하고 있습니다.&lt;/p&gt;

&lt;p&gt;Netflix의 Growth 엔지니어링 팀은 이런 변화를 예상하고 적응하는데 도움이 되는 Growth Initiatives를 실행하는 역할을 담당합니다. 전 세계 고객에게 가장 적합한 요금제 플랜과 인센티브로 Netflix에 가입 할 수 있도록 하는 시스템과 프로토콜을 설계하고 구축하는 것이 Growth 엔지니어링 팀의 역할입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082453-60ab8e00-a6d6-11eb-98a5-c9f6892bfeaf.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;사용자-가입-경로&quot;&gt;사용자 가입 경로&lt;/h1&gt;
&lt;p&gt;Netflix의 가입 경로는 3단계가 있습니다. Netflix에서는 “Signup Flow”라고 부릅니다.&lt;/p&gt;

&lt;h2 id=&quot;1-소개-및-계정-생성&quot;&gt;1. 소개 및 계정 생성&lt;/h2&gt;
&lt;p&gt;Netflix의 가치를 소개하고, 고객이 가입을 할 수 있도록 유도합니다.&lt;/p&gt;

&lt;h2 id=&quot;2-plans--offers&quot;&gt;2. Plans &amp;amp; offers&lt;/h2&gt;
&lt;p&gt;다양한 유형의 Netflix 요금제를 offering 합니다.&lt;/p&gt;

&lt;h2 id=&quot;3-payment&quot;&gt;3. Payment&lt;/h2&gt;
&lt;p&gt;고객이 자신의 요구에 가장 잘 맞는 것을 선택할 수 있도록 다양한 결제 옵션을 제공합니다.&lt;/p&gt;

&lt;p&gt;서비스 소개 및 계정 생성 부분은 어느 서비스나 비슷하기에 2,3번에 대해 Netflix가 시장에 어떻게 대응하고 있는지 설명을 하려 합니다.&lt;/p&gt;

&lt;h1 id=&quot;plans--offers&quot;&gt;Plans &amp;amp; offers&lt;/h1&gt;
&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;/h2&gt;
&lt;p&gt;Netflix에서 Plan과 Offer가 무엇인지 정의 해 보겠습니다. Plan은 기본적으로 가격이 있는 기능 세트입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082529-791ba880-a6d6-11eb-993a-b8d475545f11.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Offer는 제한된 시간 동안 요금 할인 또는 우수한 기능을 포함하는 Incentive입니다. 일반적으로 Offer는 하나 이상의 Incentive와 속성 세트로 구성됩니다.&lt;/p&gt;

&lt;p&gt;제안은 일반적으로 제한된 시간 동안 금전적 할인 또는 우수한 제품 기능을 포함하는 인센티브입니다. 일반적으로 오퍼는 하나 이상의 인센티브와 속성 세트로 구성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082552-8173e380-a6d6-11eb-973e-073f4ec0cae1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plan과 Offer를 병합하여 고객에게 제시하면 Plan 선택 페이지에 표시됩니다. 여기서는 선택한 Plan에 관계없이 3개의 Plan과 30일 무료 평가판이 있음을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;지금까지 Netflix의 요금제 관련한 비즈니스적인 설명을 하였고, 이제 연관된 아키텍처, 프로토콜 및 시스템에 대해서 살펴 보도록 하겠습니다. 일반적으로 사람들은 비즈니스와 기술을 분리하는 경향이 있는데., 모든 기술은 비즈니스를 위해 고려되어야 하며, 이를 근간으로 아키텍처가 확립 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;legacy-아키텍처&quot;&gt;Legacy 아키텍처&lt;/h1&gt;
&lt;p&gt;위에서 설명했듯이 Netflix는 스트리밍 서비스를 시작한 후 정적인 Plan과 Offer를 가지고 있었습니다. 따라서 아키텍처 또한 매우 간단했습니다. 기술적으로는 런타임에 로드되고 로컬 메모리에 저장된 작은 XML 파일 세트로 구성했습니다. 수년 동안에는 완벽하게 최적화된 디자인이었습니다. 그러나 Netflix가 계속 성장하고 서비스가 발전함에 따라 몇 가지 문제점이 생겼습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;XML 파일 업데이트는 본질적으로 오류가 발생하기 쉽고 수동적이다.&lt;/li&gt;
  &lt;li&gt;XML 파일이 업데이트 될 때마다 서비스 전체 배포가 필요하다.&lt;/li&gt;
  &lt;li&gt;XML 파일을 업데이트하려면 이 파일을 소유한 Backend 엔지니어팀의 참여가 필요하다. 타 팀의 지원을 받아야 하기에 독립적으로 업무를 수행하기가 어렵다.&lt;/li&gt;
  &lt;li&gt;UI를 렌더링하기 위한 클라이언트 로직이 필요하다. (아래는 30일 무료 평가판에 대한 데이터 구조입니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code&gt;
{
“offerId”: 123,
“planId”: 111,
“price”: “$ 8.99”,
“hasSD”: true,
“hasHD”: false,
“hasFreeTrial”: true
…
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;전 세계 고객에게 서비스가 제공됨에 따라 위의 모든 문제가 더욱 악화된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 Plan &amp;amp; Offer 데이터 검색과 관련된 다양한 시스템을 표현한 그림입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082670-a405fc80-a6d6-11eb-9705-1880cf6a3351.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;새로운-아키텍처&quot;&gt;새로운 아키텍처&lt;/h1&gt;
&lt;p&gt;Growth 엔지니어링팀은 거의 모든 플랫폼에 대해 가볍고 유연한 애플리케이션을 구축 할 수 있는 비즈니스 로직과 프로토콜을 담당하고 있습니다. 이는 Presentation Layer에 비즈니스 로직이 없어야 하며 전달되는 데이터를 렌더링하는 책임을 지니고 있음을 의미합니다. 이를 달성하기 위해 Netflix는 우려 사항 및 분리 설계 원칙을 강조하는 마이크로 서비스 아키텍처를 채택하고 설계했습니다. 아래는 Legacy 아키텍처에서 업데이트된 신규 아키텍처입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082714-b1bb8200-a6d6-11eb-911b-052b6731b1da.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 아키텍처를 보면 두 가지 변경 사항이 있습니다.&lt;/p&gt;

&lt;p&gt;첫째, SKU Domain Services입니다. 이 서비스에는 오케스트레이션 서비스의 일부였던 특수 비즈니스 로직이 포함되어 있습니다. 이 로직을 새로운 마이크로 서비스로 마이그레이션함으로써 오케스트레이션 서비스를 단순화하고, 도메인에 대한 소유권을 명확히합니다. 이렇게 함으로써 다른 서비스도 SKU 데이터를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;둘째, SKU 서비스가 이제는 Rule Engine과 SKU Catalog DB를 활용하는 플랫폼으로 확장 되었습니다. 이 플랫폼은 Growth 엔지니어링팀이 코드 변경 겅의 없이 전 세계 고객을 위해 다양한 서비스 제공을 실험할 수 있기 때문에 엄청난 비즈니스 가치를 제공합니다. 이는 엔지니어가 지루한 작업을 수행하는데 소요되는 시간을 줄이고 미래의 요구에 잘 대응할 수 있는 조금더 창의적인 작업에 더 많은 시간을 할애 할 수 있음을 의미합니다.&lt;/p&gt;

&lt;h2 id=&quot;1단계-디바이스가-plan-선택-페이지에-대한-요청을-보냅니다&quot;&gt;1단계: 디바이스가 Plan 선택 페이지에 대한 요청을 보냅니다.&lt;/h2&gt;
&lt;p&gt;과거에는 클라이언트 UI와 중간 계층 오케스트레이션 서비스간에 사용자 지정 JSON 프로토콜을 사용했었습니다. Plan 선택 페이지를 검색하기 위한 브라우저 요청에 대한 프로토콜의 예는 아래와 같습니다.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
GET /plans
{
“flow”: “browser”,
“mode”: “planSelection”
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;이 요청에는 두 가지 중요한 정보가 존재합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;flow: flow는 플랫폼을 식별하는 정보입니다. 이를 통해 오케스트레이션 서비스는 해당 요청을 적절한 플랫폼에 라우팅 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;mode: 요청되는 페이지의 이름입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flow와 mode 정보에 의해 오케스트레이션 서비스가 요청을 처리하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;2단계-요청-처리를-위해-오케스트레이션-서비스로-라우팅합니다&quot;&gt;2단계: 요청 처리를 위해 오케스트레이션 서비스로 라우팅합니다.&lt;/h2&gt;
&lt;p&gt;오케스트레이션 서비스는 upstream 요청의 유효성을 검사하고, downstream 서비스에 대한 호출을 오케스트레이션하고, JSON 응답을 작성합니다. 특정 요청의 경우 오케스트레이션 서비스를 SKU Eligibility 서비스에서 SKU 데이터를 검색하고 UI 레이어에서 사용할 수 있는 JSON 응답을 빌드합니다.&lt;/p&gt;

&lt;p&gt;해당 요청에 대한 JSON 응답은 아래와 같습니다. 아래의 응답은 재사용률을 높이고 30일 무료 평가판 이외의 제안을 잠재적으로 지원할 수 있도록 합니다.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
{
“flow”: “browser”,
“mode”: “planSelection”,
“fields”: {
“skus”: [
{
“id”: 123,
“incentives”: [“FREE_TRIAL”],
“plan”: {
“name”: “Basic”,
“quality”: “SD”,
“price” : “$8.99”,
…
}
…
},
{
“id”: 456,
“incentives”: [“FREE_TRIAL”],
“plan”: {
“name”: “Standard”,
“quality”: “HD”,
“price” : “$13.99”,
…
}
…
},
{
“id”: 789,
“incentives”: [“FREE_TRIAL”],
“plan”: {
“name”: “Premium”,
“quality”: “UHD”,
“price” : “$17.99”,
…
}
…
}
],
“selectedSku”: {
“type”: “Numeric”,
“value”: 789
}
“nextAction”: {
“type”: “Action”
“withFields”: [
“selectedSku”
]
}
}
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;위의 응답에는 SKU 목록, 선택한 SKU 정보가 포함됩니다.&lt;/p&gt;

&lt;h2 id=&quot;3단계-및-4단계-sku-eligibility-service에서-적격성-결정-및-sku-검색&quot;&gt;3단계 및 4단계: SKU Eligibility Service에서 적격성 결정 및 SKU 검색&lt;/h2&gt;
&lt;p&gt;Netflix는 글로벌 기업이기에 지역마다 다른 SKU가 존재합니다. 즉, SKU 가용성과 SKU 적격성을 구분해야 합니다. 가용성은 국가 수준에서 적용이되며 적격은 사용자 수준에서 적용이 됩니다. SKU 플랫폼에는 글로벌 SKU 세트가 포함되어 있기에 SKU의 가용성을 제어할 수 있습니다. 그리고 SKU 적격성은 SKU Eligibility Service에 의해 결정됩니다. 이렇게 구분함으로써 명확한 경계를 만들고 Growth 엔지니어링팀이 방문자를 위해 올바른 SKU를 표현하는데 집중 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;SKU Eligibility 서비스는 Netflix 서비스의 여러 부분에서 혁신을 가능하게 합니다. 이제 다양한 서비스가 SKU 데이터를 검색하기 위해 SKU Eligibility 서비스와 직접 통신을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082906-eaf3f200-a6d6-11eb-9225-24eb64130bff.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5단계-sku-플랫폼에서-적격-sku-검색&quot;&gt;5단계: SKU 플랫폼에서 적격 SKU 검색&lt;/h2&gt;
&lt;p&gt;SKU 플랫폼은 Rule Engine, 데이터베이스 및 애플리케이션 로직으로 구성됩니다. 데이터 베이스에는 Plan, Pricing 및 Offer가 포함되어 있습니다. Rule Engine은 규칙내 특정 조건이 일치 할 때 사용 가능한 Plan 및 Offer를 추출할 수 있도록 합니다. 미국에서 Offer를 검색하는 아래의 예제를 참고하세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082940-f7784a80-a6d6-11eb-8381-3a15463a47e7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SKU 플랫폼에는 이제 단 하나의 책임만 존재합니다. 즉, 모든 Netflix의 SKU를 관리합니다. 고객 컨텍스트를 가져와 SKU Rule 세트와 일치 시킵니다. SKU 자격은 Upstream으로 계산되며 SKU Rule 세트에 있는 다른 조건과 같은 방식으로 처리됩니다. 자격 및 가용성 개념을 단일 서비스에 결합하지 않음으로써 각 팀이 핵심 역량에 집중할 수 있고 자격 변경이 SKU 플랫폼에 영향을 미치지 않기에 개발자 생산성을 높일 수 있습니다. Netflix의 다음 단계는 SKU UI를 통해 셀프 서비스 및 Rule 변경에 대해 더 많이 지원하는 것입니다.&lt;/p&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;p&gt;SKU에 대한 아키텍처 변경 작업을 통해 Netflix는 모호했던 SKU 가용성 및 자격에 대한 경계를 명확하게 정의했습니다.&lt;/p&gt;

&lt;p&gt;새 아키텍처가 기존 아키텍처에 비해 갖는 장점은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;재사용 및 확장 가능한 “Shape”을 가진 도메인 객체 (이 형태는 서비스 계층 뿐만 아니라 UI 계층에서도 코드 재사용을 용이하게 합니다.)&lt;/li&gt;
  &lt;li&gt;최소한의 엔지니어링 개입으로 제품 혁신을 가능하게 하는 SKU 플랫폼 (이는 엔지니어가 다른 문제에 대해 더 도전적이고 창의적인 작업에 집중할 수 있음을 의미합니다.)&lt;/li&gt;
  &lt;li&gt;SKU 데이터 업데이트를 위한 코드 변경 대신 구성을 통해 혁신 속도를 높입니다.&lt;/li&gt;
  &lt;li&gt;더 적은 서비스 호출로 인해 지연 시간이 줄어들어 방문자의 오류가 줄어 듭니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지금 이 세상은 끊임없이 변화하고 있고, 디바이스의 기능은 계속해서 향상되고 있습니다. 사람들이 즐거움을 원하는 방법, 시기, 장소는 계속해서 진화하고 있습니다. 이러한 유형에 대해 Netflix의 Growth 엔지니어링팀은 지속적으로 견고한 기반을 구축할 수 있도록 노력하고 있습니다.&lt;/p&gt;

&lt;p&gt;Netflix가 SKU에 대해 이정도로 고민하는지 몰랐네요. 혁신적인 기업이라고 생각됩니다.^^/&lt;/p&gt;

&lt;p&gt;“flow”: “browser”,&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Netflix" /><summary type="html">본 글은 Netflix Tech 블로그의 글을 의역하여 작성한 글입니다. 배경 Netflix는 지난 10년 간 주문형 스트리밍 비디오 서비스를 제공하고 있습니다. 서비스를 제공하는 기간동아 Netflix는 전 세계 고객 확보를 위해 30일간 무료 평가판과 결합된 3가지 요금제(기본, 표준, 프리미엄)에 의존했습니다. 하지만 지금 세상은 과거에 비해 많이 변했습니다. 사람들의 여가 시간을 채울 경쟁이 증가하고 있고 디바이스 생태계가 경이적으로 성장했으며 소비자는 언제 어디서나 원하는 디바이스로 콘텐츠를 시청하기를 원하고 있습니다. Netflix의 Growth 엔지니어링 팀은 이런 변화를 예상하고 적응하는데 도움이 되는 Growth Initiatives를 실행하는 역할을 담당합니다. 전 세계 고객에게 가장 적합한 요금제 플랜과 인센티브로 Netflix에 가입 할 수 있도록 하는 시스템과 프로토콜을 설계하고 구축하는 것이 Growth 엔지니어링 팀의 역할입니다. 사용자 가입 경로 Netflix의 가입 경로는 3단계가 있습니다. Netflix에서는 “Signup Flow”라고 부릅니다. 1. 소개 및 계정 생성 Netflix의 가치를 소개하고, 고객이 가입을 할 수 있도록 유도합니다. 2. Plans &amp;amp; offers 다양한 유형의 Netflix 요금제를 offering 합니다. 3. Payment 고객이 자신의 요구에 가장 잘 맞는 것을 선택할 수 있도록 다양한 결제 옵션을 제공합니다. 서비스 소개 및 계정 생성 부분은 어느 서비스나 비슷하기에 2,3번에 대해 Netflix가 시장에 어떻게 대응하고 있는지 설명을 하려 합니다. Plans &amp;amp; offers Definitions Netflix에서 Plan과 Offer가 무엇인지 정의 해 보겠습니다. Plan은 기본적으로 가격이 있는 기능 세트입니다. Offer는 제한된 시간 동안 요금 할인 또는 우수한 기능을 포함하는 Incentive입니다. 일반적으로 Offer는 하나 이상의 Incentive와 속성 세트로 구성됩니다. 제안은 일반적으로 제한된 시간 동안 금전적 할인 또는 우수한 제품 기능을 포함하는 인센티브입니다. 일반적으로 오퍼는 하나 이상의 인센티브와 속성 세트로 구성됩니다. Plan과 Offer를 병합하여 고객에게 제시하면 Plan 선택 페이지에 표시됩니다. 여기서는 선택한 Plan에 관계없이 3개의 Plan과 30일 무료 평가판이 있음을 확인할 수 있습니다. 지금까지 Netflix의 요금제 관련한 비즈니스적인 설명을 하였고, 이제 연관된 아키텍처, 프로토콜 및 시스템에 대해서 살펴 보도록 하겠습니다. 일반적으로 사람들은 비즈니스와 기술을 분리하는 경향이 있는데., 모든 기술은 비즈니스를 위해 고려되어야 하며, 이를 근간으로 아키텍처가 확립 됩니다. Legacy 아키텍처 위에서 설명했듯이 Netflix는 스트리밍 서비스를 시작한 후 정적인 Plan과 Offer를 가지고 있었습니다. 따라서 아키텍처 또한 매우 간단했습니다. 기술적으로는 런타임에 로드되고 로컬 메모리에 저장된 작은 XML 파일 세트로 구성했습니다. 수년 동안에는 완벽하게 최적화된 디자인이었습니다. 그러나 Netflix가 계속 성장하고 서비스가 발전함에 따라 몇 가지 문제점이 생겼습니다. XML 파일 업데이트는 본질적으로 오류가 발생하기 쉽고 수동적이다. XML 파일이 업데이트 될 때마다 서비스 전체 배포가 필요하다. XML 파일을 업데이트하려면 이 파일을 소유한 Backend 엔지니어팀의 참여가 필요하다. 타 팀의 지원을 받아야 하기에 독립적으로 업무를 수행하기가 어렵다. UI를 렌더링하기 위한 클라이언트 로직이 필요하다. (아래는 30일 무료 평가판에 대한 데이터 구조입니다.) { “offerId”: 123, “planId”: 111, “price”: “$ 8.99”, “hasSD”: true, “hasHD”: false, “hasFreeTrial”: true … } 전 세계 고객에게 서비스가 제공됨에 따라 위의 모든 문제가 더욱 악화된다. 다음은 Plan &amp;amp; Offer 데이터 검색과 관련된 다양한 시스템을 표현한 그림입니다. 새로운 아키텍처 Growth 엔지니어링팀은 거의 모든 플랫폼에 대해 가볍고 유연한 애플리케이션을 구축 할 수 있는 비즈니스 로직과 프로토콜을 담당하고 있습니다. 이는 Presentation Layer에 비즈니스 로직이 없어야 하며 전달되는 데이터를 렌더링하는 책임을 지니고 있음을 의미합니다. 이를 달성하기 위해 Netflix는 우려 사항 및 분리 설계 원칙을 강조하는 마이크로 서비스 아키텍처를 채택하고 설계했습니다. 아래는 Legacy 아키텍처에서 업데이트된 신규 아키텍처입니다. 위 아키텍처를 보면 두 가지 변경 사항이 있습니다. 첫째, SKU Domain Services입니다. 이 서비스에는 오케스트레이션 서비스의 일부였던 특수 비즈니스 로직이 포함되어 있습니다. 이 로직을 새로운 마이크로 서비스로 마이그레이션함으로써 오케스트레이션 서비스를 단순화하고, 도메인에 대한 소유권을 명확히합니다. 이렇게 함으로써 다른 서비스도 SKU 데이터를 사용할 수 있습니다. 둘째, SKU 서비스가 이제는 Rule Engine과 SKU Catalog DB를 활용하는 플랫폼으로 확장 되었습니다. 이 플랫폼은 Growth 엔지니어링팀이 코드 변경 겅의 없이 전 세계 고객을 위해 다양한 서비스 제공을 실험할 수 있기 때문에 엄청난 비즈니스 가치를 제공합니다. 이는 엔지니어가 지루한 작업을 수행하는데 소요되는 시간을 줄이고 미래의 요구에 잘 대응할 수 있는 조금더 창의적인 작업에 더 많은 시간을 할애 할 수 있음을 의미합니다. 1단계: 디바이스가 Plan 선택 페이지에 대한 요청을 보냅니다. 과거에는 클라이언트 UI와 중간 계층 오케스트레이션 서비스간에 사용자 지정 JSON 프로토콜을 사용했었습니다. Plan 선택 페이지를 검색하기 위한 브라우저 요청에 대한 프로토콜의 예는 아래와 같습니다. GET /plans { “flow”: “browser”, “mode”: “planSelection” } 이 요청에는 두 가지 중요한 정보가 존재합니다. flow: flow는 플랫폼을 식별하는 정보입니다. 이를 통해 오케스트레이션 서비스는 해당 요청을 적절한 플랫폼에 라우팅 할 수 있습니다. mode: 요청되는 페이지의 이름입니다. flow와 mode 정보에 의해 오케스트레이션 서비스가 요청을 처리하게 됩니다. 2단계: 요청 처리를 위해 오케스트레이션 서비스로 라우팅합니다. 오케스트레이션 서비스는 upstream 요청의 유효성을 검사하고, downstream 서비스에 대한 호출을 오케스트레이션하고, JSON 응답을 작성합니다. 특정 요청의 경우 오케스트레이션 서비스를 SKU Eligibility 서비스에서 SKU 데이터를 검색하고 UI 레이어에서 사용할 수 있는 JSON 응답을 빌드합니다. 해당 요청에 대한 JSON 응답은 아래와 같습니다. 아래의 응답은 재사용률을 높이고 30일 무료 평가판 이외의 제안을 잠재적으로 지원할 수 있도록 합니다. { “flow”: “browser”, “mode”: “planSelection”, “fields”: { “skus”: [ { “id”: 123, “incentives”: [“FREE_TRIAL”], “plan”: { “name”: “Basic”, “quality”: “SD”, “price” : “$8.99”, … } … }, { “id”: 456, “incentives”: [“FREE_TRIAL”], “plan”: { “name”: “Standard”, “quality”: “HD”, “price” : “$13.99”, … } … }, { “id”: 789, “incentives”: [“FREE_TRIAL”], “plan”: { “name”: “Premium”, “quality”: “UHD”, “price” : “$17.99”, … } … } ], “selectedSku”: { “type”: “Numeric”, “value”: 789 } “nextAction”: { “type”: “Action” “withFields”: [ “selectedSku” ] } } } 위의 응답에는 SKU 목록, 선택한 SKU 정보가 포함됩니다. 3단계 및 4단계: SKU Eligibility Service에서 적격성 결정 및 SKU 검색 Netflix는 글로벌 기업이기에 지역마다 다른 SKU가 존재합니다. 즉, SKU 가용성과 SKU 적격성을 구분해야 합니다. 가용성은 국가 수준에서 적용이되며 적격은 사용자 수준에서 적용이 됩니다. SKU 플랫폼에는 글로벌 SKU 세트가 포함되어 있기에 SKU의 가용성을 제어할 수 있습니다. 그리고 SKU 적격성은 SKU Eligibility Service에 의해 결정됩니다. 이렇게 구분함으로써 명확한 경계를 만들고 Growth 엔지니어링팀이 방문자를 위해 올바른 SKU를 표현하는데 집중 할 수 있습니다. SKU Eligibility 서비스는 Netflix 서비스의 여러 부분에서 혁신을 가능하게 합니다. 이제 다양한 서비스가 SKU 데이터를 검색하기 위해 SKU Eligibility 서비스와 직접 통신을 할 수 있습니다. 5단계: SKU 플랫폼에서 적격 SKU 검색 SKU 플랫폼은 Rule Engine, 데이터베이스 및 애플리케이션 로직으로 구성됩니다. 데이터 베이스에는 Plan, Pricing 및 Offer가 포함되어 있습니다. Rule Engine은 규칙내 특정 조건이 일치 할 때 사용 가능한 Plan 및 Offer를 추출할 수 있도록 합니다. 미국에서 Offer를 검색하는 아래의 예제를 참고하세요. SKU 플랫폼에는 이제 단 하나의 책임만 존재합니다. 즉, 모든 Netflix의 SKU를 관리합니다. 고객 컨텍스트를 가져와 SKU Rule 세트와 일치 시킵니다. SKU 자격은 Upstream으로 계산되며 SKU Rule 세트에 있는 다른 조건과 같은 방식으로 처리됩니다. 자격 및 가용성 개념을 단일 서비스에 결합하지 않음으로써 각 팀이 핵심 역량에 집중할 수 있고 자격 변경이 SKU 플랫폼에 영향을 미치지 않기에 개발자 생산성을 높일 수 있습니다. Netflix의 다음 단계는 SKU UI를 통해 셀프 서비스 및 Rule 변경에 대해 더 많이 지원하는 것입니다. 결론 SKU에 대한 아키텍처 변경 작업을 통해 Netflix는 모호했던 SKU 가용성 및 자격에 대한 경계를 명확하게 정의했습니다. 새 아키텍처가 기존 아키텍처에 비해 갖는 장점은 아래와 같습니다. 재사용 및 확장 가능한 “Shape”을 가진 도메인 객체 (이 형태는 서비스 계층 뿐만 아니라 UI 계층에서도 코드 재사용을 용이하게 합니다.) 최소한의 엔지니어링 개입으로 제품 혁신을 가능하게 하는 SKU 플랫폼 (이는 엔지니어가 다른 문제에 대해 더 도전적이고 창의적인 작업에 집중할 수 있음을 의미합니다.) SKU 데이터 업데이트를 위한 코드 변경 대신 구성을 통해 혁신 속도를 높입니다. 더 적은 서비스 호출로 인해 지연 시간이 줄어들어 방문자의 오류가 줄어 듭니다. 지금 이 세상은 끊임없이 변화하고 있고, 디바이스의 기능은 계속해서 향상되고 있습니다. 사람들이 즐거움을 원하는 방법, 시기, 장소는 계속해서 진화하고 있습니다. 이러한 유형에 대해 Netflix의 Growth 엔지니어링팀은 지속적으로 견고한 기반을 구축할 수 있도록 노력하고 있습니다. Netflix가 SKU에 대해 이정도로 고민하는지 몰랐네요. 혁신적인 기업이라고 생각됩니다.^^/ “flow”: “browser”,</summary></entry><entry><title type="html">C3.ai 비즈니스 모델</title><link href="https://giljae.com/blog/2021/01/31/C3.ai-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%AA%A8%EB%8D%B8.html" rel="alternate" type="text/html" title="C3.ai 비즈니스 모델" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-01-31T00:00:00+00:00</updated><id>https://giljae.com/blog/2021/01/31/C3.ai%20%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4%20%EB%AA%A8%EB%8D%B8</id><content type="html" xml:base="https://giljae.com/blog/2021/01/31/C3.ai-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%AA%A8%EB%8D%B8.html">&lt;h1 id=&quot;c3-ai&quot;&gt;C3 AI?&lt;/h1&gt;
&lt;p&gt;C3 AI는 클라우드기반 엔터프라이즈 AI 서비스를 제공하는 SaaS 회사이다. 고객에게 빠른 배포와 Overhead없는 Digital Transformation 애플리케이션을 개발하고 통합 할 수 있는 기능을 제공하는 환경을 구축하여 제공한다. C3 AI는 주로 Subscription 서비스와 전문 기술 지원을 통해 수익을 창출 한다.&lt;/p&gt;

&lt;h1 id=&quot;c3-ai의-기원&quot;&gt;C3 AI의 기원&lt;/h1&gt;
&lt;p&gt;C3.ai의 설립자인 Thomas M. Siebel은 투자자들에게 아래처럼 설명했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴퓨터 과학, 특히 관계형 데이터베이스 이론에서 대학원 과정을 마친 후 저는 Oracle에 취업했습니다. 관계형 데이터베이스 시장은 1983년에 시작되었습니다. 정보 기술에 대한 글로벌 시장은 2,240억 달러였고, RDBMS 시장은 2천만 달러 미만이었습니다. 애플리케이션 개발 및 정보 처리의 기본 경제학이 RDBMS의 상승을 보장한다는 점에 만족했습니다. 10년 후 Oracle의 매출은 10억 달러를 넘어 섰습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그 후 Siebel은 그의 이름을 따서 Siebel Systems를 설립했다. 6년 후 Siebel Systems는 20억 달러의 매출을 올렸고 2006년에 Oracle에 매각되었다.&lt;/p&gt;

&lt;p&gt;Thomas M. Siebel은 전체 인프라(IaaS), 플랫폼(PaaS), 애플리케이션(SaaS)를 통해 고객/사용자의 요구에 적응 할 수 있는 클라우드 컴퓨팅인 Elastic Cloud로 발전했다. 더 빠른 배포, 실험 및 지속적인 개선을 통해 시장의 요구에 대응했다.&lt;/p&gt;

&lt;p&gt;그후 C3.ai는 새로운 산업 혁명, 데이터 및 서버와 결합된 알고리즘에 의해 주도되는 “디지털 산업 혁명”에 자리 잡은 디지털 혁신을 주도하는 엔터프라이즈 AI를 제공하게 되었다.&lt;/p&gt;

&lt;h1 id=&quot;주요-비즈니스-모델&quot;&gt;주요 비즈니스 모델&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;C3.ai는 클라우드 기반의 엔터프라이즈 AI 회사이다. 주요 목표는 대규모 혹은 중간 규모의 조직 및 회사의 비즈니스에서 AI를 이용한 사용 사례를 구현하도록 돕는 것이다.&lt;/li&gt;
  &lt;li&gt;C3.ai의 무기는 C3 AI Suite라는 부르는 모델 기반의 아키텍처이다. 이것은 클라우드 위에 구축된 개발 프레임워크 세트로, 조직 내에서 애플리케이션을 빠르게 배포하기 위한 도구를 제공하는 동시에 새로운 애플리케이션을 개발하기 위한 개발 프레임 워크 스택을 제공한다.&lt;/li&gt;
  &lt;li&gt;C3.ai는 주로 엔터프라이즈 구독을 기반으로 수익을 창출하는 SaaS 회사이다. 수익의 일부는 전문가 서비스에 기인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082106-fe528d80-a6d5-11eb-9885-7107b8f3417a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;차별화-전략&quot;&gt;차별화 전략&lt;/h1&gt;
&lt;p&gt;C3.ai 플랫폼은 오픈 소스 소프트웨어를 기반으로 구축되었지만 모듈형태로 되어 있기에 고객이 선호하는 구성 요소를 사용할 수 있도록 되어있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082133-07435f00-a6d6-11eb-876b-eb968f5f9eb7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C3.ai는 인기있는 통합 개발 환경, 프레임워크, 제품군, 도구 및 DevOps 옵션에 대한 커넥터 및 Integration을 제공한다.&lt;/p&gt;

&lt;p&gt;C3.ai 플랫폼의 핵심적인 차별화 요소는 개발 속도, 반복성 및 확장성을 보장하는 “Type System” 아키텍처이다. Type System은 메타 데이터를 사용하여 모든 데이터 및 데이터 소스, 기본 스토리지 기술, 데이터 과학 모델, 데이터 처리 서비스, 애플리케이션 및 애플리케이션 서비스와 같은 종단 간 개발 그리고 배치 프로세스의 모든 것을 나타낸다. 이런 부분들은 상당히 복잡하기 때문에 단순, 일관, 추상적인 방법으로 표현한다.&lt;/p&gt;

&lt;p&gt;C3.ai는 MS Azure에서 실행되는 서비스로써 플랫폼을 제공하지만 사설 클라우드 또는 기타 공용 클라우드에서도 실행이 가능하다. On-premise 및 다양한 환경에서도 가능하다.&lt;/p&gt;

&lt;h1 id=&quot;파트너쉽&quot;&gt;파트너쉽&lt;/h1&gt;
&lt;p&gt;C3.ai의 민첩성과 확장성, 타사 도구에 대한 유연성 및 개방성 조합이 주목을 받고 있는 상황이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082183-14604e00-a6d6-11eb-950b-7b36781949b3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C3.ai의 창업자이자 CEO인 Tom Siebel은 Transform C3.ai의 최신 파트너십에서 IBM Services와의 전략적 제휴를 통해 시장에서 가장 선호하는 글로벌 시스템 통합 업체가 될 것이라고 발표했다. 두 회사는 이번 거래가 “엔터프라이즈 규모의 산업 및 특정 도메인 영역의 AI 애플리케이션 제공을 가속화 할 것”이라고 말했다.&lt;/p&gt;

&lt;p&gt;IBM과의 계약으로 C3.ai는 AI 플랫폼 및 애플리케이션과 결합 된 산업 및 기술 전문 지식을 석유 및 가스 산업에 공동으로 제공하게 되었다. 그리고 2018년에 Azure를 선호하는 퍼블릭 클라우드 플랫폼으로 제공되기 위해 MS와 전략적 파트너쉽도 발표했다. (그해 Amazon Web Services 및 Google Cloud Platform과 별도의 파트너쉽을 발표했음에도 불구하고… 사업을 위해 앞만 보고 달린다라는 건가?)&lt;/p&gt;

&lt;h1 id=&quot;사용-사례&quot;&gt;사용 사례&lt;/h1&gt;
&lt;p&gt;Shell의 데이터 과학 총괄 관리자인 Daniel Jeavons는 C3.ai를 기반으로 구축한 후 회사의 데이터 기반 예측 유기 관리 및 최적화 앱에 대해 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116082229-20e4a680-a6d6-11eb-9180-0e9808d131b7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수천 개의 밸브 및 압축기의 예기치 않은 고장을 예측하고 방지하는 예측 유지 보수 IoT 애플리케이션으로 C3.ai를 사용하기 시작했고 현재 모니터링 되고 있는 자산은 전 세계 20개 이상의 석유 및 가스 생산 시설에서 사용되고 있다. 이렇게 사용함으로써 2백만 달러를 절약 할 수 있었다라고 한다. 그리고 지금은 재사용 가능한 구성 요소를 사용하여 전자 수중 펌프용 전력 최적화 애플리케이션을 개발하고 있다고 한다.&lt;/li&gt;
  &lt;li&gt;제조 및 공급망 분석 구현 리더인 3M임원 Jennifer Austin은 지난 2년간 개발한 가격 분석, 재고 최적화, 공급망 위험 관리 애플리케이션에 대한 진행 상황을 언급했다. Austin은 3M이 특정 영역에서 변경 관리 사용자 채택 문제를 해결하기 위해 노력하고 있고 재고 최적화 애플리케이션만으로도 연간 2억달러를 절감하는 동시에 서비스 수준을 개선했다고 언급했다.&lt;/li&gt;
  &lt;li&gt;Bank of America의 데이터 및 혁신 그룹 공동 책임자인 Brice Rosenzweig는 사용자가 보다 쉽게 접근할 수 있는 데이터 플랫폼 구축 및 현금 관리 그리고 대출 최적화에 대한 애플리케이션 개발 진행 상황에 대해서 얘기한다. (아직 개발중)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;p&gt;C3.ai의 주요 강점은 복잡성을 추상화하고 데이터를 분석하기 위해 Type System 아키텍처에 의존하면서 X or Y용으로 선호하는 도구를 교체하여 사용할 수 있는 개방성이다.&lt;/p&gt;

&lt;p&gt;C3.ai의 플랫폼 영역은 광범위하기 때문에 자사의 기술만 강요하지 않고 클라우드 네이티브 서비스에 대한 실용적인 개방성을 수용한 점이 매우 현명하고 현실적이라고 보여지며, 고객이 추구하는 Needs와 조화를 이룬다고 생각한다.&lt;/p&gt;

&lt;p&gt;C3.ai의 경영층은 로드맵은 고객 중심적으로 수립되어 있다고 강조하고 있고, 예시로 2019년에는 고객이 요청한 커넥터 및 통합, 코드 개발 옵션 및 사용자 인터페이스 개선을 추가하는데 중점을 두었다. 2020년에는 C3.ai의 Ex Machina 데이터 과학 스튜디오의 데이터 탐색 및 하이퍼 파라미터 최적화 기능을 개선했다. 또한 Serverless Computing, 자가 치유 기능 및 1초 미만의 배포 속도를 지원하는 개선 사항과 함께 개발자 경험에 중점을 두고 있다. 즉, 고객과 Tight하게 일을 하면서 그들의 Needs를 플랫폼에 빠르게 반영하므로써 의미있고 필요한 기능으로 더욱 탄탄하게 만드는 전략이다. 고객과의 신뢰가 없다면 불가능한 일일 것이다.&lt;/p&gt;

&lt;p&gt;플랫폼을 기반으로 이렇게 쌓인 그들의 알고리즘을 이용해 고객의 문제를 해결하는 애플리케이션을 함께 만들어가는 그들의 사업 모델은 이미 시장에서 가치가 있는 것으로 평가를 받고 있다. 하지만 그 가치는 그 속에 속한 “사람, 기술, 비즈니스 모델”에 기반한 것이라 생각한다.&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="C3.ai" /><summary type="html">C3 AI? C3 AI는 클라우드기반 엔터프라이즈 AI 서비스를 제공하는 SaaS 회사이다. 고객에게 빠른 배포와 Overhead없는 Digital Transformation 애플리케이션을 개발하고 통합 할 수 있는 기능을 제공하는 환경을 구축하여 제공한다. C3 AI는 주로 Subscription 서비스와 전문 기술 지원을 통해 수익을 창출 한다. C3 AI의 기원 C3.ai의 설립자인 Thomas M. Siebel은 투자자들에게 아래처럼 설명했다. 컴퓨터 과학, 특히 관계형 데이터베이스 이론에서 대학원 과정을 마친 후 저는 Oracle에 취업했습니다. 관계형 데이터베이스 시장은 1983년에 시작되었습니다. 정보 기술에 대한 글로벌 시장은 2,240억 달러였고, RDBMS 시장은 2천만 달러 미만이었습니다. 애플리케이션 개발 및 정보 처리의 기본 경제학이 RDBMS의 상승을 보장한다는 점에 만족했습니다. 10년 후 Oracle의 매출은 10억 달러를 넘어 섰습니다. 그 후 Siebel은 그의 이름을 따서 Siebel Systems를 설립했다. 6년 후 Siebel Systems는 20억 달러의 매출을 올렸고 2006년에 Oracle에 매각되었다. Thomas M. Siebel은 전체 인프라(IaaS), 플랫폼(PaaS), 애플리케이션(SaaS)를 통해 고객/사용자의 요구에 적응 할 수 있는 클라우드 컴퓨팅인 Elastic Cloud로 발전했다. 더 빠른 배포, 실험 및 지속적인 개선을 통해 시장의 요구에 대응했다. 그후 C3.ai는 새로운 산업 혁명, 데이터 및 서버와 결합된 알고리즘에 의해 주도되는 “디지털 산업 혁명”에 자리 잡은 디지털 혁신을 주도하는 엔터프라이즈 AI를 제공하게 되었다. 주요 비즈니스 모델 C3.ai는 클라우드 기반의 엔터프라이즈 AI 회사이다. 주요 목표는 대규모 혹은 중간 규모의 조직 및 회사의 비즈니스에서 AI를 이용한 사용 사례를 구현하도록 돕는 것이다. C3.ai의 무기는 C3 AI Suite라는 부르는 모델 기반의 아키텍처이다. 이것은 클라우드 위에 구축된 개발 프레임워크 세트로, 조직 내에서 애플리케이션을 빠르게 배포하기 위한 도구를 제공하는 동시에 새로운 애플리케이션을 개발하기 위한 개발 프레임 워크 스택을 제공한다. C3.ai는 주로 엔터프라이즈 구독을 기반으로 수익을 창출하는 SaaS 회사이다. 수익의 일부는 전문가 서비스에 기인한다. 차별화 전략 C3.ai 플랫폼은 오픈 소스 소프트웨어를 기반으로 구축되었지만 모듈형태로 되어 있기에 고객이 선호하는 구성 요소를 사용할 수 있도록 되어있다. C3.ai는 인기있는 통합 개발 환경, 프레임워크, 제품군, 도구 및 DevOps 옵션에 대한 커넥터 및 Integration을 제공한다. C3.ai 플랫폼의 핵심적인 차별화 요소는 개발 속도, 반복성 및 확장성을 보장하는 “Type System” 아키텍처이다. Type System은 메타 데이터를 사용하여 모든 데이터 및 데이터 소스, 기본 스토리지 기술, 데이터 과학 모델, 데이터 처리 서비스, 애플리케이션 및 애플리케이션 서비스와 같은 종단 간 개발 그리고 배치 프로세스의 모든 것을 나타낸다. 이런 부분들은 상당히 복잡하기 때문에 단순, 일관, 추상적인 방법으로 표현한다. C3.ai는 MS Azure에서 실행되는 서비스로써 플랫폼을 제공하지만 사설 클라우드 또는 기타 공용 클라우드에서도 실행이 가능하다. On-premise 및 다양한 환경에서도 가능하다. 파트너쉽 C3.ai의 민첩성과 확장성, 타사 도구에 대한 유연성 및 개방성 조합이 주목을 받고 있는 상황이다. C3.ai의 창업자이자 CEO인 Tom Siebel은 Transform C3.ai의 최신 파트너십에서 IBM Services와의 전략적 제휴를 통해 시장에서 가장 선호하는 글로벌 시스템 통합 업체가 될 것이라고 발표했다. 두 회사는 이번 거래가 “엔터프라이즈 규모의 산업 및 특정 도메인 영역의 AI 애플리케이션 제공을 가속화 할 것”이라고 말했다. IBM과의 계약으로 C3.ai는 AI 플랫폼 및 애플리케이션과 결합 된 산업 및 기술 전문 지식을 석유 및 가스 산업에 공동으로 제공하게 되었다. 그리고 2018년에 Azure를 선호하는 퍼블릭 클라우드 플랫폼으로 제공되기 위해 MS와 전략적 파트너쉽도 발표했다. (그해 Amazon Web Services 및 Google Cloud Platform과 별도의 파트너쉽을 발표했음에도 불구하고… 사업을 위해 앞만 보고 달린다라는 건가?) 사용 사례 Shell의 데이터 과학 총괄 관리자인 Daniel Jeavons는 C3.ai를 기반으로 구축한 후 회사의 데이터 기반 예측 유기 관리 및 최적화 앱에 대해 설명한다. 수천 개의 밸브 및 압축기의 예기치 않은 고장을 예측하고 방지하는 예측 유지 보수 IoT 애플리케이션으로 C3.ai를 사용하기 시작했고 현재 모니터링 되고 있는 자산은 전 세계 20개 이상의 석유 및 가스 생산 시설에서 사용되고 있다. 이렇게 사용함으로써 2백만 달러를 절약 할 수 있었다라고 한다. 그리고 지금은 재사용 가능한 구성 요소를 사용하여 전자 수중 펌프용 전력 최적화 애플리케이션을 개발하고 있다고 한다. 제조 및 공급망 분석 구현 리더인 3M임원 Jennifer Austin은 지난 2년간 개발한 가격 분석, 재고 최적화, 공급망 위험 관리 애플리케이션에 대한 진행 상황을 언급했다. Austin은 3M이 특정 영역에서 변경 관리 사용자 채택 문제를 해결하기 위해 노력하고 있고 재고 최적화 애플리케이션만으로도 연간 2억달러를 절감하는 동시에 서비스 수준을 개선했다고 언급했다. Bank of America의 데이터 및 혁신 그룹 공동 책임자인 Brice Rosenzweig는 사용자가 보다 쉽게 접근할 수 있는 데이터 플랫폼 구축 및 현금 관리 그리고 대출 최적화에 대한 애플리케이션 개발 진행 상황에 대해서 얘기한다. (아직 개발중) 결론 C3.ai의 주요 강점은 복잡성을 추상화하고 데이터를 분석하기 위해 Type System 아키텍처에 의존하면서 X or Y용으로 선호하는 도구를 교체하여 사용할 수 있는 개방성이다. C3.ai의 플랫폼 영역은 광범위하기 때문에 자사의 기술만 강요하지 않고 클라우드 네이티브 서비스에 대한 실용적인 개방성을 수용한 점이 매우 현명하고 현실적이라고 보여지며, 고객이 추구하는 Needs와 조화를 이룬다고 생각한다. C3.ai의 경영층은 로드맵은 고객 중심적으로 수립되어 있다고 강조하고 있고, 예시로 2019년에는 고객이 요청한 커넥터 및 통합, 코드 개발 옵션 및 사용자 인터페이스 개선을 추가하는데 중점을 두었다. 2020년에는 C3.ai의 Ex Machina 데이터 과학 스튜디오의 데이터 탐색 및 하이퍼 파라미터 최적화 기능을 개선했다. 또한 Serverless Computing, 자가 치유 기능 및 1초 미만의 배포 속도를 지원하는 개선 사항과 함께 개발자 경험에 중점을 두고 있다. 즉, 고객과 Tight하게 일을 하면서 그들의 Needs를 플랫폼에 빠르게 반영하므로써 의미있고 필요한 기능으로 더욱 탄탄하게 만드는 전략이다. 고객과의 신뢰가 없다면 불가능한 일일 것이다. 플랫폼을 기반으로 이렇게 쌓인 그들의 알고리즘을 이용해 고객의 문제를 해결하는 애플리케이션을 함께 만들어가는 그들의 사업 모델은 이미 시장에서 가치가 있는 것으로 평가를 받고 있다. 하지만 그 가치는 그 속에 속한 “사람, 기술, 비즈니스 모델”에 기반한 것이라 생각한다.</summary></entry><entry><title type="html">Mantis- 비용 효율적, 실시간, 운영 중심의 애플리케이션 구축을 위한 플랫폼</title><link href="https://giljae.com/blog/2020/12/15/Mantis-%EB%B9%84%EC%9A%A9-%ED%9A%A8%EC%9C%A8%EC%A0%81,-%EC%8B%A4%EC%8B%9C%EA%B0%84,-%EC%9A%B4%EC%98%81-%EC%A4%91%EC%8B%AC%EC%9D%98-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%94%8C%EB%9E%AB%ED%8F%BC.html" rel="alternate" type="text/html" title="Mantis- 비용 효율적, 실시간, 운영 중심의 애플리케이션 구축을 위한 플랫폼" /><published>2020-12-15T00:00:00+00:00</published><updated>2020-12-15T00:00:00+00:00</updated><id>https://giljae.com/blog/2020/12/15/Mantis-%20%EB%B9%84%EC%9A%A9%20%ED%9A%A8%EC%9C%A8%EC%A0%81,%20%EC%8B%A4%EC%8B%9C%EA%B0%84,%20%EC%9A%B4%EC%98%81%20%EC%A4%91%EC%8B%AC%EC%9D%98%20%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%20%EA%B5%AC%EC%B6%95%EC%9D%84%20%EC%9C%84%ED%95%9C%20%ED%94%8C%EB%9E%AB%ED%8F%BC</id><content type="html" xml:base="https://giljae.com/blog/2020/12/15/Mantis-%EB%B9%84%EC%9A%A9-%ED%9A%A8%EC%9C%A8%EC%A0%81,-%EC%8B%A4%EC%8B%9C%EA%B0%84,-%EC%9A%B4%EC%98%81-%EC%A4%91%EC%8B%AC%EC%9D%98-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B5%AC%EC%B6%95%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%94%8C%EB%9E%AB%ED%8F%BC.html">&lt;p&gt;본 글은 Netflix Tech 블로그에 작성된 &lt;a href=&quot;https://netflixtechblog.com/open-sourcing-mantis-a-platform-for-building-cost-effective-realtime-operations-focused-5b8ff387813a&quot;&gt;글&lt;/a&gt;을 기반으로 재가공 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116080297-d82bee00-a6d3-11eb-8129-97ce4d2de48b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Netflix는 스트림 처리 애플리케이션을 구축하기 위한 플랫폼을 오픈 소스로 제공했습니다.&lt;/p&gt;

&lt;p&gt;실시간 애플리케이션을 개발할 때 기반으로 사용하며 신속하게 문제를 식별하고 Alert을 Trigger하며 수정 사항을 바로 적용할 수 있는 강점이 있습니다.&lt;/p&gt;

&lt;p&gt;Netflix는 점점 더 복잡해지는 시스템의 운영 상태를 개선하면서 Metric을 정확하게 처리하는데 오랜 시간이 걸리는 문제를 가지고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://netflix.github.io/mantis/&quot;&gt;Mantis&lt;/a&gt;는 엔지니어에게 운영에 대한 통찰력을 손상 시키지 않고 복잡한 분산 시스템(e.g. 마이크로서비스)을 관찰하고 운영하는 비용을 최소화 할 수 있는 기능을 제공합니다.&lt;/p&gt;

&lt;p&gt;Netflix 엔지니어들은 Mantis 위에서 비용 효율적인 애플리케이션을 구축하여 문제를 신속하게 식별하고, Alert을 Trigger하고, 변경 사항을 적용하여 Netflix 서비스의 Downtime을 최소화하거나 발생하지 않게 했다고 합니다.&lt;/p&gt;

&lt;p&gt;기존 시스템이 Metric을 처리하는데 10분이상 걸린다면, Mantis의 경우에는 몇 초로 시간을 줄였다고 합니다. 서비스가 중단 되었을 경우에는 매 초가 중요하기 때문에 이 점은 매우 매력적입니다.&lt;/p&gt;

&lt;p&gt;서비스가 성장함에 따라 시스템의 운영 상태에 대해 비용 효율적이며 신속한 통찰력을 갖는 것이 매우 중요하게 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;mantis란-무엇인가&quot;&gt;Mantis란 무엇인가?&lt;/h1&gt;
&lt;p&gt;Mantis는 실시간 스트림 처리를 위한 애플리케이션을 구축할 수 있는 플랫폼입니다.&lt;/p&gt;

&lt;p&gt;클라우드에 배포 된 마이크로 서비스와 비슷하게 Mantis 애플리케이션은 Mantis 플랫폼에 배포됩니다.&lt;/p&gt;

&lt;p&gt;Mantis 플랫폼은 작업의 수명주기(e.g 배포, 업데이트 및 종료)를 관리하는 API를 제공하고, Pool을 컨테이너화하여 리소스를 관리하며, 클라우드 기반의 마이크로 서비스와 유사하게 Job을 검색 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Stream 프로세싱 관련 As-a-Service를 제공함으로써 Mantis는 개발자가 비즈니스 로직에 집중할 수 있도록 강력하고 비용 효율적인 스트리밍 애플리케이션을 구축할 수 있도록 도와 줍니다.&lt;/p&gt;

&lt;h1 id=&quot;mantis를-만든-이유는&quot;&gt;Mantis를 만든 이유는?&lt;/h1&gt;
&lt;p&gt;Mantis는 빠르게 성장하는 복잡한 마이크로 서비스 생태계에서 더 나은 운영 통찰력을 얻기 위해 Netflix에서 만들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116080395-fabe0700-a6d3-11eb-92f4-aa685ebfbc7d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;시스템의 복잡성이 증가함에 따라 이해도는 급격히 감소합니다. 이러한 복잡성에 대응을 하려면 운영 통찰력이 필요하고 새로운 접근 방식이 필요합니다.&lt;/p&gt;

&lt;p&gt;즉, 운영 데이터를 생성하고 수집하는 기존의 방식을 변경해야 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raw event에 Access할 수 있어야 합니다. 애플리케이션은 모든 단일 이벤트를 게시 할 수 있어야 합니다. 일반적으로 필터링 혹은 샘플링을 통해 통찰력을 얻으려고 하지만 이 경우 Raw data가 손실되었기 때문에 쉽지 않습니다.&lt;/li&gt;
  &lt;li&gt;해당 데이터에 실시간으로 Access할 수 있어야 합니다. 일반적으로 서비스 운영 시 시간에 매우 민감합니다.&lt;/li&gt;
  &lt;li&gt;애플리케이션에 새로운 작업 없이 해당 데이터에 대해 새로운 질의를 할 수 있어야 합니다. 문제가 발생하는 경우 해당 데이터를 통해 통찰력을 도출 하는 것이 매우 중요합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 새로운 타입의 실행 환경이 필요합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;짧은 대기 시간으로 대용량 데이터 처리가 가능해야 합니다.&lt;/li&gt;
  &lt;li&gt;운영 부담이 낮아야 합니다. 대부분의 운영 작업을 자동으로 처리하는 관리형 플랫폼이 필요합니다. 모니터링 시스템을 운영하는데 추가되는 오버 헤드가 필요하지 않습니다.&lt;/li&gt;
  &lt;li&gt;탄력적이어야 합니다. 노드 장애시 자동으로 복구하고 데이터 볼륨에 따라 동적으로 리소스를 확장 할 수 있는 안정적인 시스템이 필요합니다.&lt;/li&gt;
  &lt;li&gt;스트리밍 서비스 생태계가 필요합니다. Netflix의 사용 사례를 보면 종종 동일한 데이터가 필요하다고 합니다. 데이터와 결과를 공유하여 공동 작업을 할 수 있도록 함으로써 코드 및 데이터 재사용을 극대화해야 합니다. 이렇게 함으로써 비용 효율적인 Job을 만들 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 모든 작업에 대해서 비용 효율적으로 수행 할 수 있어야 합니다. 비즈니스적으로 크리티컬한 시스템이 확장됨에 따라 이 시스템을 지원하는 시스템은 크리티컬한 시스템보다 더 적은 비용이 사용되어야 합니다.&lt;/p&gt;

&lt;p&gt;Mantis는 위의 요구 사항을 충족하도록 제작되었고, Netflix에서 설계하였습니다.&lt;/p&gt;

&lt;h1 id=&quot;mantis를-사용하는-방법&quot;&gt;Mantis를 사용하는 방법&lt;/h1&gt;
&lt;p&gt;Mantis는 이상 감지 및 Alarm과 같은 High volume, Low latency에 적합한 플랫폼을 제공합니다.&lt;/p&gt;

&lt;p&gt;Mantis는 2014년부터 Netflix에서 제작하였고, 매일 수 조개의 Event와 Peta byte의 데이터를 처리합니다.&lt;/p&gt;

&lt;p&gt;스트리밍 마이크로 서비스 생태계인 Mantis 플랫폼은 엔지니어에게 운영에 대한 통찰력을 손상 시키지 않으면서 복잡한 분산 시스템을 관리/운영하는데에 드는 비용을 최소화 할 수 있는 기능을 제공합니다.&lt;/p&gt;

&lt;p&gt;엔지니어는 Mantis를 기반으로 비용 효율적인 실시간 애플리케이션을 구축하여 문제를 신속하게 식별하고 수정을 적용하여 Netflix 서비스의 Downtime을 최소화 혹은 방지하는데 활용되고 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;mantis-사용-사례&quot;&gt;Mantis 사용 사례&lt;/h1&gt;
&lt;h2 id=&quot;netflix-스트리밍-상태에-대한-실시간-모니터링&quot;&gt;Netflix 스트리밍 상태에 대한 실시간 모니터링&lt;/h2&gt;
&lt;p&gt;Netflix SPS(Stream Starts per Second)는 Netflix 스트리밍 서비스의 상태를 추적하는데 사용되는 지표입니다. SPS는 스트리밍이 성공적으로 Hit한 사람들의 수를 추적합니다. 이 측정 항목의 추이가 비정상적으로 변경되면 사용자의 콘텐츠 시청에 부정적인 영향을 미칩니다.&lt;/p&gt;

&lt;p&gt;Mantis는 수천 대의 Netflix 서버(mantis-publish 라이브러리)에서 직접 가져온 데이터를 실시간으로 처리하여 SPS 추세를 모니터링합니다. DES(Souble Exponential Smoothing)를 사용하면 비정상적인 편차를 몇 초 만에 감지하고 담당팀에 알릴 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;contextual-alerting&quot;&gt;Contextual Alerting&lt;/h2&gt;
&lt;p&gt;Netflix가 성장함에 따라 마이크로 서비스의 개수도 증가했습니다. 엔지니어가 문제의 원인을 신속하게 파악하기 위해 문제 범위를 좁히려면 Downstream 및 Upstream 서비스에서 발생하는 상황을 이해해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6UwcqiNsZ8U&quot;&gt;Contextual alerting application&lt;/a&gt;은 예외를 식별하기 위해 실시간으로 Netflix 마이크로서비스간 수백만건의 Interaction을 분석합니다. Mantis를 사용함으로써 평균 감지 시간을 수십 분에서 몇 초로 줄일 수 있었습니다. Netflix의 큰 규모를 생각하면 대단한 것 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;raven&quot;&gt;Raven&lt;/h2&gt;
&lt;p&gt;대규모 분산 시스템에서는 가끔 사용자가 문제를 제기하지만 전반적으로 시스템의 상태가 문제 없는 경우가 있습니다. 이런 경우 사용자/디바이스/서비스와 관련된 Event를 실시간으로 탐색하여 원인을 찾을 필요가 있습니다. 더군다나 사용자의 요청이 수천 대의 서버를 경유하게 된다면? 문제가 되는 서버를 찾고 Log를 분석하는 것은 매우 힘든 작업일 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uODxUJ5Jwis&quot;&gt;Raven&lt;/a&gt; 애플리케이션은 mantis-publish 라이브러리를 이용하여 실시간 Stream 매칭 결과에서 특정 기준(e.g 사용자ID/디바이스ID)에 일치하는 Event를 파악 할 수 있도록 MQL 쿼리를 작성할 수 있는 UI를 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;cassandra-및-elastic-search-상태-모니터링&quot;&gt;Cassandra 및 Elastic Search 상태 모니터링&lt;/h2&gt;
&lt;p&gt;Netflix는 현재 수백 개의 Cassandra 및 Elastic Search 클러스터를 이용하고 있습니다.&lt;/p&gt;

&lt;p&gt;Cassandra 와 Elastic Search의 상태 체크 애플리케이션은 Netflix내의 모든 Cassandra/Elastic Search 클러스터의 상태를 체크하기 위해 실시간으로 Event를 분석합니다. 이 시스템이 가동된 이후 False page 수가 크게 감소했습니다.&lt;/p&gt;

&lt;h2 id=&quot;alerting-on-log&quot;&gt;Alerting on Log&lt;/h2&gt;
&lt;p&gt;Alerting on Logs 애플리케이션을 사용하면 애플리케이션 로그에서 특정 패턴이 감지 될 때 페이지를 표시하는 Alert을 생성할 수 있습니다. 이 애플리케이션은 실시간으로 수천 대의 서버에서 로그를 분석합니다.&lt;/p&gt;

&lt;h2 id=&quot;chaos-테스트에-대한-모니터링&quot;&gt;Chaos 테스트에 대한 모니터링&lt;/h2&gt;
&lt;p&gt;Chaos 테스트는 Netflix의 Resilience(탄력성)중 하나입니다. 다양한 애플리케이션의 탄력성을 테스트하기 위해 매일 수십 건의 Chaos 테스트가 수행됩니다.&lt;/p&gt;

&lt;p&gt;Chaos 테스트 애플리케이션은 테스트중에 클라이언트 및 서버측 Event를 실시간으로 분석하여 사용자 경험을 추적하고 문제가 발생할 경우 Chaos 테스트를 중단합니다.&lt;/p&gt;

&lt;h2 id=&quot;실시간-개인-식별-정보personally-identifiable-information-pii-감지&quot;&gt;실시간 개인 식별 정보(Personally Identifiable Information, PII) 감지&lt;/h2&gt;
&lt;p&gt;매일 수조 건의 Event가 Netflix 데이터 시스템을 통해 전달되기에 민감한 데이터가 섞이지 않도록 하는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;이 애플리케이션은 모든 Streaming 데이터에 패턴 감지 알고리즘을 적용하여 이러한 데이터의 존재를 식별합니다.&lt;/p&gt;

&lt;h1 id=&quot;mantis-architecture&quot;&gt;Mantis Architecture&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116080689-5ab4ad80-a6d4-11eb-98b4-1d3f52885c4b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mantis는 공유 Pool을 생성하는데 사용되는 Apache Mesos와 Job에 리소스를 할당하는데 사용되는 &lt;a href=&quot;https://github.com/Netflix/Fenzo/&quot;&gt;Fenzo&lt;/a&gt;라는 오픈 소스를 사용하여 Stream 처리 작업을 실행하는 서버 클러스터를 관리합니다.&lt;/p&gt;

&lt;p&gt;Mantis는 크게 두 개의 주요 클러스터가 존재합니다.&lt;/p&gt;

&lt;h2 id=&quot;master-cluster&quot;&gt;Master Cluster&lt;/h2&gt;
&lt;p&gt;마스터 클러스터는 모든 Job의 흐름을 관리합니다,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Resource Manager: Fenzo를 사용하여 Worker에게 리소스 할당&lt;/li&gt;
  &lt;li&gt;Job Manager: 메타 데이터, SLA, Artifact location, Job topology 및 수명 주기를 처리 및 관리합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;agent-cluster&quot;&gt;Agent Cluster&lt;/h2&gt;
&lt;p&gt;사용자가 Stream을 제출하면 에이전트 클러스터에서 하나 이상의 Job이 실행됩니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인스턴스: 에이전트 클러스터는 Job을 실행하는 Pool을 여러 인스턴스로 구성합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;끝으로,
금일 발생한 &lt;a href=&quot;https://m.yna.co.kr/view/AKR20201214159051017?section=industry/index&quot;&gt;구글 장애&lt;/a&gt;로 인해 많은 사용자들이 불편함을 겪었습니다.&lt;/p&gt;

&lt;p&gt;Mantis를 적용하더라도 장애에 대해서 완벽하게 대응하기는 어렵지만, 원인을 빨리 찾아 Downtime을 최소화하여 서비스의 Quality를 높이려는 그들의 노력에 박수를 보내고 싶습니다.&lt;/p&gt;

&lt;p&gt;시간이 되면, Mantis를 가지고 테스트를 해보고 조금 더 Deep-dive한 내용으로 포스팅 하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://netflixtechblog.com/open-sourcing-mantis-a-platform-for-building-cost-effective-realtime-operations-focused-5b8ff387813a&lt;/li&gt;
  &lt;li&gt;https://netflix.github.io/mantis/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Mantis," /><category term="Netflix" /><summary type="html">본 글은 Netflix Tech 블로그에 작성된 글을 기반으로 재가공 되었습니다. Netflix는 스트림 처리 애플리케이션을 구축하기 위한 플랫폼을 오픈 소스로 제공했습니다. 실시간 애플리케이션을 개발할 때 기반으로 사용하며 신속하게 문제를 식별하고 Alert을 Trigger하며 수정 사항을 바로 적용할 수 있는 강점이 있습니다. Netflix는 점점 더 복잡해지는 시스템의 운영 상태를 개선하면서 Metric을 정확하게 처리하는데 오랜 시간이 걸리는 문제를 가지고 있었습니다. Mantis는 엔지니어에게 운영에 대한 통찰력을 손상 시키지 않고 복잡한 분산 시스템(e.g. 마이크로서비스)을 관찰하고 운영하는 비용을 최소화 할 수 있는 기능을 제공합니다. Netflix 엔지니어들은 Mantis 위에서 비용 효율적인 애플리케이션을 구축하여 문제를 신속하게 식별하고, Alert을 Trigger하고, 변경 사항을 적용하여 Netflix 서비스의 Downtime을 최소화하거나 발생하지 않게 했다고 합니다. 기존 시스템이 Metric을 처리하는데 10분이상 걸린다면, Mantis의 경우에는 몇 초로 시간을 줄였다고 합니다. 서비스가 중단 되었을 경우에는 매 초가 중요하기 때문에 이 점은 매우 매력적입니다. 서비스가 성장함에 따라 시스템의 운영 상태에 대해 비용 효율적이며 신속한 통찰력을 갖는 것이 매우 중요하게 됩니다. Mantis란 무엇인가? Mantis는 실시간 스트림 처리를 위한 애플리케이션을 구축할 수 있는 플랫폼입니다. 클라우드에 배포 된 마이크로 서비스와 비슷하게 Mantis 애플리케이션은 Mantis 플랫폼에 배포됩니다. Mantis 플랫폼은 작업의 수명주기(e.g 배포, 업데이트 및 종료)를 관리하는 API를 제공하고, Pool을 컨테이너화하여 리소스를 관리하며, 클라우드 기반의 마이크로 서비스와 유사하게 Job을 검색 할 수 있습니다. Stream 프로세싱 관련 As-a-Service를 제공함으로써 Mantis는 개발자가 비즈니스 로직에 집중할 수 있도록 강력하고 비용 효율적인 스트리밍 애플리케이션을 구축할 수 있도록 도와 줍니다. Mantis를 만든 이유는? Mantis는 빠르게 성장하는 복잡한 마이크로 서비스 생태계에서 더 나은 운영 통찰력을 얻기 위해 Netflix에서 만들었습니다. 시스템의 복잡성이 증가함에 따라 이해도는 급격히 감소합니다. 이러한 복잡성에 대응을 하려면 운영 통찰력이 필요하고 새로운 접근 방식이 필요합니다. 즉, 운영 데이터를 생성하고 수집하는 기존의 방식을 변경해야 합니다. Raw event에 Access할 수 있어야 합니다. 애플리케이션은 모든 단일 이벤트를 게시 할 수 있어야 합니다. 일반적으로 필터링 혹은 샘플링을 통해 통찰력을 얻으려고 하지만 이 경우 Raw data가 손실되었기 때문에 쉽지 않습니다. 해당 데이터에 실시간으로 Access할 수 있어야 합니다. 일반적으로 서비스 운영 시 시간에 매우 민감합니다. 애플리케이션에 새로운 작업 없이 해당 데이터에 대해 새로운 질의를 할 수 있어야 합니다. 문제가 발생하는 경우 해당 데이터를 통해 통찰력을 도출 하는 것이 매우 중요합니다. 그리고 새로운 타입의 실행 환경이 필요합니다. 짧은 대기 시간으로 대용량 데이터 처리가 가능해야 합니다. 운영 부담이 낮아야 합니다. 대부분의 운영 작업을 자동으로 처리하는 관리형 플랫폼이 필요합니다. 모니터링 시스템을 운영하는데 추가되는 오버 헤드가 필요하지 않습니다. 탄력적이어야 합니다. 노드 장애시 자동으로 복구하고 데이터 볼륨에 따라 동적으로 리소스를 확장 할 수 있는 안정적인 시스템이 필요합니다. 스트리밍 서비스 생태계가 필요합니다. Netflix의 사용 사례를 보면 종종 동일한 데이터가 필요하다고 합니다. 데이터와 결과를 공유하여 공동 작업을 할 수 있도록 함으로써 코드 및 데이터 재사용을 극대화해야 합니다. 이렇게 함으로써 비용 효율적인 Job을 만들 수 있습니다. 위의 모든 작업에 대해서 비용 효율적으로 수행 할 수 있어야 합니다. 비즈니스적으로 크리티컬한 시스템이 확장됨에 따라 이 시스템을 지원하는 시스템은 크리티컬한 시스템보다 더 적은 비용이 사용되어야 합니다. Mantis는 위의 요구 사항을 충족하도록 제작되었고, Netflix에서 설계하였습니다. Mantis를 사용하는 방법 Mantis는 이상 감지 및 Alarm과 같은 High volume, Low latency에 적합한 플랫폼을 제공합니다. Mantis는 2014년부터 Netflix에서 제작하였고, 매일 수 조개의 Event와 Peta byte의 데이터를 처리합니다. 스트리밍 마이크로 서비스 생태계인 Mantis 플랫폼은 엔지니어에게 운영에 대한 통찰력을 손상 시키지 않으면서 복잡한 분산 시스템을 관리/운영하는데에 드는 비용을 최소화 할 수 있는 기능을 제공합니다. 엔지니어는 Mantis를 기반으로 비용 효율적인 실시간 애플리케이션을 구축하여 문제를 신속하게 식별하고 수정을 적용하여 Netflix 서비스의 Downtime을 최소화 혹은 방지하는데 활용되고 있습니다. Mantis 사용 사례 Netflix 스트리밍 상태에 대한 실시간 모니터링 Netflix SPS(Stream Starts per Second)는 Netflix 스트리밍 서비스의 상태를 추적하는데 사용되는 지표입니다. SPS는 스트리밍이 성공적으로 Hit한 사람들의 수를 추적합니다. 이 측정 항목의 추이가 비정상적으로 변경되면 사용자의 콘텐츠 시청에 부정적인 영향을 미칩니다. Mantis는 수천 대의 Netflix 서버(mantis-publish 라이브러리)에서 직접 가져온 데이터를 실시간으로 처리하여 SPS 추세를 모니터링합니다. DES(Souble Exponential Smoothing)를 사용하면 비정상적인 편차를 몇 초 만에 감지하고 담당팀에 알릴 수 있습니다. Contextual Alerting Netflix가 성장함에 따라 마이크로 서비스의 개수도 증가했습니다. 엔지니어가 문제의 원인을 신속하게 파악하기 위해 문제 범위를 좁히려면 Downstream 및 Upstream 서비스에서 발생하는 상황을 이해해야 합니다. Contextual alerting application은 예외를 식별하기 위해 실시간으로 Netflix 마이크로서비스간 수백만건의 Interaction을 분석합니다. Mantis를 사용함으로써 평균 감지 시간을 수십 분에서 몇 초로 줄일 수 있었습니다. Netflix의 큰 규모를 생각하면 대단한 것 같습니다. Raven 대규모 분산 시스템에서는 가끔 사용자가 문제를 제기하지만 전반적으로 시스템의 상태가 문제 없는 경우가 있습니다. 이런 경우 사용자/디바이스/서비스와 관련된 Event를 실시간으로 탐색하여 원인을 찾을 필요가 있습니다. 더군다나 사용자의 요청이 수천 대의 서버를 경유하게 된다면? 문제가 되는 서버를 찾고 Log를 분석하는 것은 매우 힘든 작업일 것입니다. Raven 애플리케이션은 mantis-publish 라이브러리를 이용하여 실시간 Stream 매칭 결과에서 특정 기준(e.g 사용자ID/디바이스ID)에 일치하는 Event를 파악 할 수 있도록 MQL 쿼리를 작성할 수 있는 UI를 제공합니다. Cassandra 및 Elastic Search 상태 모니터링 Netflix는 현재 수백 개의 Cassandra 및 Elastic Search 클러스터를 이용하고 있습니다. Cassandra 와 Elastic Search의 상태 체크 애플리케이션은 Netflix내의 모든 Cassandra/Elastic Search 클러스터의 상태를 체크하기 위해 실시간으로 Event를 분석합니다. 이 시스템이 가동된 이후 False page 수가 크게 감소했습니다. Alerting on Log Alerting on Logs 애플리케이션을 사용하면 애플리케이션 로그에서 특정 패턴이 감지 될 때 페이지를 표시하는 Alert을 생성할 수 있습니다. 이 애플리케이션은 실시간으로 수천 대의 서버에서 로그를 분석합니다. Chaos 테스트에 대한 모니터링 Chaos 테스트는 Netflix의 Resilience(탄력성)중 하나입니다. 다양한 애플리케이션의 탄력성을 테스트하기 위해 매일 수십 건의 Chaos 테스트가 수행됩니다. Chaos 테스트 애플리케이션은 테스트중에 클라이언트 및 서버측 Event를 실시간으로 분석하여 사용자 경험을 추적하고 문제가 발생할 경우 Chaos 테스트를 중단합니다. 실시간 개인 식별 정보(Personally Identifiable Information, PII) 감지 매일 수조 건의 Event가 Netflix 데이터 시스템을 통해 전달되기에 민감한 데이터가 섞이지 않도록 하는 것이 중요합니다. 이 애플리케이션은 모든 Streaming 데이터에 패턴 감지 알고리즘을 적용하여 이러한 데이터의 존재를 식별합니다. Mantis Architecture Mantis는 공유 Pool을 생성하는데 사용되는 Apache Mesos와 Job에 리소스를 할당하는데 사용되는 Fenzo라는 오픈 소스를 사용하여 Stream 처리 작업을 실행하는 서버 클러스터를 관리합니다. Mantis는 크게 두 개의 주요 클러스터가 존재합니다. Master Cluster 마스터 클러스터는 모든 Job의 흐름을 관리합니다, Resource Manager: Fenzo를 사용하여 Worker에게 리소스 할당 Job Manager: 메타 데이터, SLA, Artifact location, Job topology 및 수명 주기를 처리 및 관리합니다. Agent Cluster 사용자가 Stream을 제출하면 에이전트 클러스터에서 하나 이상의 Job이 실행됩니다. 인스턴스: 에이전트 클러스터는 Job을 실행하는 Pool을 여러 인스턴스로 구성합니다. 끝으로, 금일 발생한 구글 장애로 인해 많은 사용자들이 불편함을 겪었습니다. Mantis를 적용하더라도 장애에 대해서 완벽하게 대응하기는 어렵지만, 원인을 빨리 찾아 Downtime을 최소화하여 서비스의 Quality를 높이려는 그들의 노력에 박수를 보내고 싶습니다. 시간이 되면, Mantis를 가지고 테스트를 해보고 조금 더 Deep-dive한 내용으로 포스팅 하도록 하겠습니다. References: https://netflixtechblog.com/open-sourcing-mantis-a-platform-for-building-cost-effective-realtime-operations-focused-5b8ff387813a https://netflix.github.io/mantis/</summary></entry><entry><title type="html">코로나(COVID-19)로 인해 더 가속화되는 코드 커팅</title><link href="https://giljae.com/blog/2020/12/13/%EC%BD%94%EB%A1%9C%EB%82%98(COVID-19)%EB%A1%9C-%EC%9D%B8%ED%95%B4-%EB%8D%94-%EA%B0%80%EC%86%8D%ED%99%94%EB%90%98%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%BB%A4%ED%8C%85.html" rel="alternate" type="text/html" title="코로나(COVID-19)로 인해 더 가속화되는 코드 커팅" /><published>2020-12-13T00:00:00+00:00</published><updated>2020-12-13T00:00:00+00:00</updated><id>https://giljae.com/blog/2020/12/13/%EC%BD%94%EB%A1%9C%EB%82%98(COVID-19)%EB%A1%9C%20%EC%9D%B8%ED%95%B4%20%EB%8D%94%20%EA%B0%80%EC%86%8D%ED%99%94%EB%90%98%EB%8A%94%20%EC%BD%94%EB%93%9C%20%EC%BB%A4%ED%8C%85</id><content type="html" xml:base="https://giljae.com/blog/2020/12/13/%EC%BD%94%EB%A1%9C%EB%82%98(COVID-19)%EB%A1%9C-%EC%9D%B8%ED%95%B4-%EB%8D%94-%EA%B0%80%EC%86%8D%ED%99%94%EB%90%98%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%BB%A4%ED%8C%85.html">&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116079931-6784d180-a6d3-11eb-8c4b-9d19ceffdd18.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;본 글은 어디까지나 개인적인 의견임을 서두에 밝힙니다.&lt;/p&gt;

&lt;p&gt;COVID-19는 식료품, 게임, 스트리밍 서비스에 이르기까지 다양한 기술을 가속화했습니다. 그러나 혜택을 받지 못한 산업 중 하나는 전통적인 유료TV입니다.&lt;/p&gt;

&lt;p&gt;오늘 TV로 유투브를 보다가, 몇 주 동안 셋탑박스의 전원을 켜지 않았다라는 사실을 알게 되었습니다. 몇 주 동안 케이블TV를 보지 않았음에도 콘텐츠를 소비하는데 전혀 문제가 없었다는 것입니다.&lt;/p&gt;

&lt;p&gt;이런 상황에 처한 사람이 더 있지 않을까? 라는 생각이 들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116079975-73709380-a6d3-11eb-8599-5efe93c22b29.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;eMarketer의 연구에 따르면 케이블, 위성 및 통신 TV 산업은 역대 가장 많은 구독자를 잃고 있다고 합니다. 올해 미국내 600만 가구 이상이 유료TV의 코드를 끊었고, 총 코드 커터 가구 수는 3120만 가구로 늘어났습니다.&lt;/p&gt;

&lt;p&gt;2024년까지 더 증가할 것으로 예측하고 있으며, 미국내 유료TV를 구독하지 않는 가구가 1/3이상이 될 것이라고 언급했습니다.&lt;/p&gt;

&lt;p&gt;무엇이 코드 커팅을 하게 만든 것일까요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116080003-7e2b2880-a6d3-11eb-8715-b6a07adb409a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예상한대로 유료TV의 구독자 감소는 스트리밍 서비스 구독이 증가했기 때문입니다. eMarketer에 따르면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“소비자들이 유료TV 구독을 해지하는 것은 스트리밍에 비해 높은 가격 때문이라고 합니다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 이유중 하나는 COVID-19로 인해 스포츠 중계가 감소되었기 떄문입니다. 스포츠가 다시 활성화되더라도 이전의 케이블 또는 위성 TV로 돌아 가지 않을 것이라고 eMarketer는 예측 했습니다.&lt;/p&gt;

&lt;p&gt;유료TV의 구독자 감소로 인해 TV 시청률도 감소하고 있고 이는 광고 산업에도 영향을 미치고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116080035-897e5400-a6d3-11eb-8c25-8530dc1fefa9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2020년에 TV광고 지출이 15% 감소하였고 이는 2011년 이후 업계 최저치입니다. COVID-19 문제가 해결된다고 해도 “정상수준”으로 돌아가기 어렵다고 분석가들은 언급합니다.&lt;/p&gt;

&lt;p&gt;이 추세로 보면 향후 더 많은 광고 비용이 TV에서 디지털 미디어로 전환될 것으로 예상됩니다.&lt;/p&gt;

&lt;p&gt;결국 케이블 또는 위성TV 제공업체는 소비자가 사용하는 서비스를 강화하는 것보다는 수익성이 있는 인터넷쪽으로 초점을 전환하여 손실을 완화할 가능성이 높습니다.&lt;/p&gt;

&lt;iframe width=&quot;665&quot; height=&quot;382&quot; src=&quot;https://www.youtube.com/embed/W8r-tXRLazs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;예전에 비디오가 라디오를 대체한 것처럼 COVID-19로 인해 케이블TV의 대체 가능성이 더 높아질 것으로 생각됩니다.&lt;/p&gt;

&lt;p&gt;케이블 또는 위성TV 사업자들의 대응 전략은 무엇일까요?&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Cord" /><category term="cutting," /><category term="Media," /><category term="OTT" /><summary type="html">본 글은 어디까지나 개인적인 의견임을 서두에 밝힙니다. COVID-19는 식료품, 게임, 스트리밍 서비스에 이르기까지 다양한 기술을 가속화했습니다. 그러나 혜택을 받지 못한 산업 중 하나는 전통적인 유료TV입니다. 오늘 TV로 유투브를 보다가, 몇 주 동안 셋탑박스의 전원을 켜지 않았다라는 사실을 알게 되었습니다. 몇 주 동안 케이블TV를 보지 않았음에도 콘텐츠를 소비하는데 전혀 문제가 없었다는 것입니다. 이런 상황에 처한 사람이 더 있지 않을까? 라는 생각이 들었습니다. eMarketer의 연구에 따르면 케이블, 위성 및 통신 TV 산업은 역대 가장 많은 구독자를 잃고 있다고 합니다. 올해 미국내 600만 가구 이상이 유료TV의 코드를 끊었고, 총 코드 커터 가구 수는 3120만 가구로 늘어났습니다. 2024년까지 더 증가할 것으로 예측하고 있으며, 미국내 유료TV를 구독하지 않는 가구가 1/3이상이 될 것이라고 언급했습니다. 무엇이 코드 커팅을 하게 만든 것일까요? 예상한대로 유료TV의 구독자 감소는 스트리밍 서비스 구독이 증가했기 때문입니다. eMarketer에 따르면 “소비자들이 유료TV 구독을 해지하는 것은 스트리밍에 비해 높은 가격 때문이라고 합니다.” 이런 이유중 하나는 COVID-19로 인해 스포츠 중계가 감소되었기 떄문입니다. 스포츠가 다시 활성화되더라도 이전의 케이블 또는 위성 TV로 돌아 가지 않을 것이라고 eMarketer는 예측 했습니다. 유료TV의 구독자 감소로 인해 TV 시청률도 감소하고 있고 이는 광고 산업에도 영향을 미치고 있습니다. 2020년에 TV광고 지출이 15% 감소하였고 이는 2011년 이후 업계 최저치입니다. COVID-19 문제가 해결된다고 해도 “정상수준”으로 돌아가기 어렵다고 분석가들은 언급합니다. 이 추세로 보면 향후 더 많은 광고 비용이 TV에서 디지털 미디어로 전환될 것으로 예상됩니다. 결국 케이블 또는 위성TV 제공업체는 소비자가 사용하는 서비스를 강화하는 것보다는 수익성이 있는 인터넷쪽으로 초점을 전환하여 손실을 완화할 가능성이 높습니다. 예전에 비디오가 라디오를 대체한 것처럼 COVID-19로 인해 케이블TV의 대체 가능성이 더 높아질 것으로 생각됩니다. 케이블 또는 위성TV 사업자들의 대응 전략은 무엇일까요?</summary></entry><entry><title type="html">2021 Gartner 기술 트렌드</title><link href="https://giljae.com/blog/2020/12/07/2021-Gartner-%EA%B8%B0%EC%88%A0-%ED%8A%B8%EB%A0%8C%EB%93%9C.html" rel="alternate" type="text/html" title="2021 Gartner 기술 트렌드" /><published>2020-12-07T00:00:00+00:00</published><updated>2020-12-07T00:00:00+00:00</updated><id>https://giljae.com/blog/2020/12/07/2021%20Gartner%20%EA%B8%B0%EC%88%A0%20%ED%8A%B8%EB%A0%8C%EB%93%9C</id><content type="html" xml:base="https://giljae.com/blog/2020/12/07/2021-Gartner-%EA%B8%B0%EC%88%A0-%ED%8A%B8%EB%A0%8C%EB%93%9C.html">&lt;p&gt;COVID-19 유행으로 많은 산업 현장들이 어려움을 겪고 있고 이로 인해 직장내에 많은 것들이 변화되고 있습니다.&lt;/p&gt;

&lt;p&gt;직원들이 정기적으로 손을 씻고 있는지 확인하기 위해서 Sensor 또는 RFID 태그가 사용되고 있고 마스크를 착용을 강조하고 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 행동을 유도하기 위해 데이터를 수집하고 사용하는 것을 IoB(Internet of Behavior)라고 합니다. 조직에서 생산하는 데이터 뿐만 아니라 다른 소스의 데이터를 결합하고 해당 데이터를 사용하는 방법을 개선함에 따라 IoB가 조직과 사람간의 상호 작용에 많은 영향을 미칠 것 입니다.&lt;/p&gt;

&lt;p&gt;IoB는 COVID-19로 인한 경제 상황에서 비즈니스가 탄력을 받기위해 요구하는 전략적 기술 트렌드 중 하나 입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IoB는 데이터를 사용하여 행동을 변경하는 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gartner의 올해의 트렌드는 사람 중심, 위치 독립성 및 탄력적인 전달이라는 세 가지 주제로 분류됩니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사람 중심성 (People centricity): 전염병으로 인해 많은 사람들이 조직에서 일하는 방식이 변화되고 있지만 아직까지 사람이 모든 비즈니스의 중심에 있습니다. 따라서 지금같은 상황에서는 디지털화 된 프로세스를 이용하여 비즈니스를 작동되게 해야 합니다.&lt;/li&gt;
  &lt;li&gt;위치 독립성 (Location independence): COVID-19는 직원, 고객, 공급 업체 및 조직 생태계가 물리적으로 존재하는 곳으로 이동했습니다. 위치 독립성은 새로운 비즈니스를 지원하기 위해 기술 전환을 필요로 합니다.&lt;/li&gt;
  &lt;li&gt;탄력적인 전달 (Resilient delivery): 전염병 혹은 불황은 전 세계에 존재합니다. 이 상황에 대해서 적응할 준비가 된 조직은 모든 유형의 혼란을 극복할 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gartner의 9가지 기술 전략 트렌드는 서로 독립적으로 작동되지 않고 상호 작용으로 강화됩니다.&lt;/p&gt;

&lt;iframe width=&quot;665&quot; height=&quot;382&quot; src=&quot;https://www.youtube.com/embed/s3rlYWcwdDY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;트렌드-1-행동-인터넷-internet-of-behaviors&quot;&gt;트렌드 1: 행동 인터넷 (Internet of Behaviors)&lt;/h1&gt;
&lt;p&gt;위에서 언급했듯이 IoB는 데이터를 사용하여 행동을 변경하는 것입니다. 일상 생활의 “Digital dust”(디지털 및 현실 세계에 걸친 데이터)를 수집하는 기술이 증가함에 따라 해당 정보는 행동에 영향을 미치는 데 사용 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어서 상업용 차량의 경우 Telematics는 급제동 및 회전에 이르기까지 운전 행동을 모니터링 할 수 있습니다. 회사는 이 데이터를 사용하여 운전자 스타일 및 안전성을 개선할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“IoB는 목표와 결과에 따라 윤리적, 사회적 영향을 미칩니다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IoB는 여러 소스에서 데이터를 수집, 결합, 처리 할 수 있습니다. 고객 데이터 및 공공 부문/정부 기관에서 처리하는 시민 데이터, 소셜 미디어, 안면 인식, 위치등의 데이터를 처리하는 기술이 점점 더 정교해지면서 가능성이 커졌습니다.&lt;/p&gt;

&lt;p&gt;건강 보험 회사가 보험료를 줄이기 위해 신체 활동을 추적하는데 사용하는 것과 동일하게 식료품 구매를 모니터링 하는데 사용 할 수 있습니다. 건강에 해로운 품목이 너무 많으면 보험료가 올라갈 수 있습니다. 지역마다 다른 개인정보보호법은 IoB의 채택과 규모에 큰 영향을 미치게 될 것 입니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-2-모든-경험-total-experience&quot;&gt;트렌드 2: 모든 경험 (Total experience)&lt;/h1&gt;
&lt;p&gt;Total experience는 다중 경험, 고객 경험, 직원 경험 및 사용자 경험을 결합하여 비즈니스 결과를 혁신합니다. 목표는 이러한 모든 요소가 교차하는 전반적인 경험을 개선하는 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“이러한 추세를 통해 조직은 COVID-19를 이겨낼 수 있습니다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Silo에서 각각 개별적으로 개선하는 것과 다르게 모든 경험을 긴밀하게 연결하면 비즈니스를 경쟁 업체와 차별화하여 지속 가능한 경쟁 우위를 확보 할 수 있습니다. 이러한 추세를 통해 조직은 원격 작업, 모바일, 가상 및 분산 고객을 포함한 COVID-19를 이겨내는 요인으로 활용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 통신 회사가 안전과 만족도를 높이기 위해 전체 고객 경험을 혁신했습니다.&lt;/p&gt;

&lt;p&gt;첫째, 기존 앱을 통해 예약 시스템을 제공합니다. 고객이 예약을 위해서 도착하여 매장에서 75 feet 이내의 거리에 들어 왔을 때, 사회적 거리를 유지하는 아래의 알림을 전달합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;체크인 절차를 안내하는 알림과&lt;/li&gt;
  &lt;li&gt;안전 할 수 있을 때까지 걸리는 시간을 알려주는 알림을 받습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 회사는 더 많은 디지털 키오스크를 제공하도록 서비스를 조정하고 직원들이 하드웨어를 물리적으로 만질 필요없이 자신의 태블릿을 사용하여 고객의 장치를 탐색할 수 있도록 했습니다. 그 결과 고객과 직원을 위해 더 안전한 경험이 제공되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-3-개인-정보-보호-강화-컴퓨팅-privacy-enhancing-computation&quot;&gt;트렌드 3: 개인 정보 보호 강화 컴퓨팅 (Privacy-enhancing computation)&lt;/h1&gt;
&lt;p&gt;개인 정보 보호 강화 컴퓨팅은 데이터를 보호하는 세 가지 기술이 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;민감한 데이터를 처리하거나 분석 할 수 있는 신뢰할 수 있는 환경을 제공합니다.&lt;/li&gt;
  &lt;li&gt;분산 된 방식으로 데이터를 처리 하거나 분석합니다.&lt;/li&gt;
  &lt;li&gt;처리 또는 분석전에 데이터와 알고리즘을 암호화 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 것을 통해 조직은 기밀성을 유지하면서 지역 및 경쟁 업체와 안전하게 공동 연구 작업을 수행할 수 있습니다. 이 접근 방식은 개인 정보 또는 보안을 유지하면서 데이터를 공유해야하는 필요성이 있을 때 활용될 수 있도록 특별히 설계되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111643/116079731-1f65af00-a6d3-11eb-8907-96c2832f158f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;트렌드-4-분산-클라우드-distributed-cloud&quot;&gt;트렌드 4: 분산 클라우드 (Distributed Cloud)&lt;/h1&gt;
&lt;p&gt;분산 클라우드는 클라우드 서비스가 서로 다른 물리적 위치에 분산되는 개념이지만 운영 및 정책등은 여전히 CSP의 책임입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“분산 클라우드는 클라우드의 미래입니다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이러한 서비스를 사용하면 지연 시간이 짧은 시나리오에 도움이 되고 데이터 비용도 절감되기에 데이터가 특정 지리적 영역에 남아있어야 한다는 법률을 수용하는데 도움이 됩니다. 또한 비용이 들고 복잡할 수 있는 자체 프라이빗 클라우드말고 퍼블릭 클라우드의 이점을 누리고 있기에 분산 클라우드는 클라우드의 미래입니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-5-어디서나-운영-anywhere-operations&quot;&gt;트렌드 5: 어디서나 운영 (Anywhere operations)&lt;/h1&gt;
&lt;p&gt;COVID-19 상황에서도 운영이 필수적입니다. 이 운영 모델을 통해 고객, 고용주 및 비즈니스 파트너가 원격환경에서 운영되는 모든 곳에서 비즈니스에 접근하고 활성화 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;어디서나 작동하는 운영 모델은 “디지털 우선, 원격 우선”입니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 모바일 전용이지만 물리적인 상호 작용없이 자금 이체에서 계좌 개설까지 모든 것을 처리하는 은행이 있습니다. 물리적 지점 없이 디지털 방식으로 제공되어야 현 상황을 이겨낼 수 있습니다. (e.g. 카카오뱅크?)&lt;/p&gt;

&lt;h1 id=&quot;트렌드-6-사이버-보안-메시-cybersecurity-mesh&quot;&gt;트렌드 6: 사이버 보안 메시 (Cybersecurity mesh)&lt;/h1&gt;
&lt;p&gt;사이버 보안 메시는 확장 가능하고 유연한 사이버 보안 제어에 대한 분산 아키텍처 접근 방식입니다. 현재 많은 자산이 기존 보안 체계를 벗어나 외부에 존재합니다. 사이버 보안 메시는 본질적으로 사람이나 사물의 신원을 중심으로 보안 경계를 정의 할 수 있도록 합니다. 정책을 중앙으로 집중시키고 정책 시행을 분산함으로써 모듈식의 대응력있는보안 접근 방식을 가능하게 합니다. 경계 보호의 의미가 낮아짐에 따라 “성벽 도시”의 보안 접근 방식은 현재 요구사항에 맞게 진화해야 합니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-7-지능형-컴포저블-비즈니스-intelligent-composable-business&quot;&gt;트렌드 7: 지능형 컴포저블 비즈니스 (Intelligent composable business)&lt;/h1&gt;
&lt;p&gt;지능형 컴포저블 비즈니스는 상황에 따라 적응하고 근본적으로 재정렬 할 수 있는 비즈니스입니다. 조직이 디지털 비즈니스 전략을 가속화하여 더 빠른 디지털 전환을 추진 함에 따라 민첩하게 현재 사용 가능한 데이터를 기반으로 비즈니스 결정을 내려야 합니다.&lt;/p&gt;

&lt;p&gt;이를 성공적으로 수행하기 위해서는 정보에 대해 더 나은 접근이 가능해야 하고 더 나은 통찰력으로 정보를 보강하여 신속하게 대응할 수 있어야 합니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-8-ai-엔지니어링-ai-engineering&quot;&gt;트렌드 8: AI 엔지니어링 (AI engineering)&lt;/h1&gt;
&lt;p&gt;AI 엔지니어링 전략은 AI투자에 대한 전체 가치를 제공하면서 AI 모델의 성능, 확장성, 해석 가능성 및 안정성을 촉진합니다. AI 프로젝트는 유지 보수성, 확장성 및 정책과 관련된 문제에 직면하기에 문제가 될 소지가 있습니다.&lt;/p&gt;

&lt;p&gt;AI 엔지니어링은 AI를 전문적이고 격리된 프로젝트 세트가 아닌 DevOps 프로세스의 일부로 만듭니다. 여러 AI 기술의 조합을 운영할 때 명확한 방법을 제공합니다.&lt;/p&gt;

&lt;p&gt;AI 엔지니어링의 정책 측면으로 인해 책임감있는 AI가 신뢰, 투명성, 윤리, 공정성, 해석 가능성 및 규정 준수 문제를 처리하기 위해 등장하고 있고 이는 AI 책임 운영화입니다.&lt;/p&gt;

&lt;h1 id=&quot;트렌드-9-초자동화-hyperautomation&quot;&gt;트렌드 9: 초자동화 (Hyperautomation)&lt;/h1&gt;
&lt;p&gt;Hyperautomation은 조직에서 자동화 할 수 있는 모든 것을 자동화해야 한다는 생각입니다. 능률적이지 않은 레거시 비즈니스 프로세스를 가진 조직에 의해 주도되어 조직에 막대한 비용과 광범위한 문제를 발생 시킬 수 있습니다.&lt;/p&gt;

&lt;p&gt;많은 조직은 Lean, 최적화, 연결등의 기술 지원을 받습니다. 동시에 디지털 비즈니스의 가속화에는 효율성, 속도가 필요합니다. 효율성 및 비즈니스 민첩성에 초점을 맞추지 않는 조직은 뒤쳐 질 것입니다.&lt;/p&gt;

&lt;p&gt;References: https://www.gartner.com/smarterwithgartner/gartner-top-strategic-technology-trends-for-2021/&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Gartner" /><summary type="html">COVID-19 유행으로 많은 산업 현장들이 어려움을 겪고 있고 이로 인해 직장내에 많은 것들이 변화되고 있습니다. 직원들이 정기적으로 손을 씻고 있는지 확인하기 위해서 Sensor 또는 RFID 태그가 사용되고 있고 마스크를 착용을 강조하고 있습니다. 이러한 행동을 유도하기 위해 데이터를 수집하고 사용하는 것을 IoB(Internet of Behavior)라고 합니다. 조직에서 생산하는 데이터 뿐만 아니라 다른 소스의 데이터를 결합하고 해당 데이터를 사용하는 방법을 개선함에 따라 IoB가 조직과 사람간의 상호 작용에 많은 영향을 미칠 것 입니다. IoB는 COVID-19로 인한 경제 상황에서 비즈니스가 탄력을 받기위해 요구하는 전략적 기술 트렌드 중 하나 입니다. IoB는 데이터를 사용하여 행동을 변경하는 것입니다. Gartner의 올해의 트렌드는 사람 중심, 위치 독립성 및 탄력적인 전달이라는 세 가지 주제로 분류됩니다. 사람 중심성 (People centricity): 전염병으로 인해 많은 사람들이 조직에서 일하는 방식이 변화되고 있지만 아직까지 사람이 모든 비즈니스의 중심에 있습니다. 따라서 지금같은 상황에서는 디지털화 된 프로세스를 이용하여 비즈니스를 작동되게 해야 합니다. 위치 독립성 (Location independence): COVID-19는 직원, 고객, 공급 업체 및 조직 생태계가 물리적으로 존재하는 곳으로 이동했습니다. 위치 독립성은 새로운 비즈니스를 지원하기 위해 기술 전환을 필요로 합니다. 탄력적인 전달 (Resilient delivery): 전염병 혹은 불황은 전 세계에 존재합니다. 이 상황에 대해서 적응할 준비가 된 조직은 모든 유형의 혼란을 극복할 것입니다. Gartner의 9가지 기술 전략 트렌드는 서로 독립적으로 작동되지 않고 상호 작용으로 강화됩니다. 트렌드 1: 행동 인터넷 (Internet of Behaviors) 위에서 언급했듯이 IoB는 데이터를 사용하여 행동을 변경하는 것입니다. 일상 생활의 “Digital dust”(디지털 및 현실 세계에 걸친 데이터)를 수집하는 기술이 증가함에 따라 해당 정보는 행동에 영향을 미치는 데 사용 될 수 있습니다. 예를 들어서 상업용 차량의 경우 Telematics는 급제동 및 회전에 이르기까지 운전 행동을 모니터링 할 수 있습니다. 회사는 이 데이터를 사용하여 운전자 스타일 및 안전성을 개선할 수 있습니다. “IoB는 목표와 결과에 따라 윤리적, 사회적 영향을 미칩니다.” IoB는 여러 소스에서 데이터를 수집, 결합, 처리 할 수 있습니다. 고객 데이터 및 공공 부문/정부 기관에서 처리하는 시민 데이터, 소셜 미디어, 안면 인식, 위치등의 데이터를 처리하는 기술이 점점 더 정교해지면서 가능성이 커졌습니다. 건강 보험 회사가 보험료를 줄이기 위해 신체 활동을 추적하는데 사용하는 것과 동일하게 식료품 구매를 모니터링 하는데 사용 할 수 있습니다. 건강에 해로운 품목이 너무 많으면 보험료가 올라갈 수 있습니다. 지역마다 다른 개인정보보호법은 IoB의 채택과 규모에 큰 영향을 미치게 될 것 입니다. 트렌드 2: 모든 경험 (Total experience) Total experience는 다중 경험, 고객 경험, 직원 경험 및 사용자 경험을 결합하여 비즈니스 결과를 혁신합니다. 목표는 이러한 모든 요소가 교차하는 전반적인 경험을 개선하는 것입니다. “이러한 추세를 통해 조직은 COVID-19를 이겨낼 수 있습니다.” Silo에서 각각 개별적으로 개선하는 것과 다르게 모든 경험을 긴밀하게 연결하면 비즈니스를 경쟁 업체와 차별화하여 지속 가능한 경쟁 우위를 확보 할 수 있습니다. 이러한 추세를 통해 조직은 원격 작업, 모바일, 가상 및 분산 고객을 포함한 COVID-19를 이겨내는 요인으로 활용할 수 있습니다. 예를 들어, 통신 회사가 안전과 만족도를 높이기 위해 전체 고객 경험을 혁신했습니다. 첫째, 기존 앱을 통해 예약 시스템을 제공합니다. 고객이 예약을 위해서 도착하여 매장에서 75 feet 이내의 거리에 들어 왔을 때, 사회적 거리를 유지하는 아래의 알림을 전달합니다. 체크인 절차를 안내하는 알림과 안전 할 수 있을 때까지 걸리는 시간을 알려주는 알림을 받습니다. 이 회사는 더 많은 디지털 키오스크를 제공하도록 서비스를 조정하고 직원들이 하드웨어를 물리적으로 만질 필요없이 자신의 태블릿을 사용하여 고객의 장치를 탐색할 수 있도록 했습니다. 그 결과 고객과 직원을 위해 더 안전한 경험이 제공되었습니다. 트렌드 3: 개인 정보 보호 강화 컴퓨팅 (Privacy-enhancing computation) 개인 정보 보호 강화 컴퓨팅은 데이터를 보호하는 세 가지 기술이 있습니다. 민감한 데이터를 처리하거나 분석 할 수 있는 신뢰할 수 있는 환경을 제공합니다. 분산 된 방식으로 데이터를 처리 하거나 분석합니다. 처리 또는 분석전에 데이터와 알고리즘을 암호화 합니다. 이러한 것을 통해 조직은 기밀성을 유지하면서 지역 및 경쟁 업체와 안전하게 공동 연구 작업을 수행할 수 있습니다. 이 접근 방식은 개인 정보 또는 보안을 유지하면서 데이터를 공유해야하는 필요성이 있을 때 활용될 수 있도록 특별히 설계되었습니다. 트렌드 4: 분산 클라우드 (Distributed Cloud) 분산 클라우드는 클라우드 서비스가 서로 다른 물리적 위치에 분산되는 개념이지만 운영 및 정책등은 여전히 CSP의 책임입니다. “분산 클라우드는 클라우드의 미래입니다.” 이러한 서비스를 사용하면 지연 시간이 짧은 시나리오에 도움이 되고 데이터 비용도 절감되기에 데이터가 특정 지리적 영역에 남아있어야 한다는 법률을 수용하는데 도움이 됩니다. 또한 비용이 들고 복잡할 수 있는 자체 프라이빗 클라우드말고 퍼블릭 클라우드의 이점을 누리고 있기에 분산 클라우드는 클라우드의 미래입니다. 트렌드 5: 어디서나 운영 (Anywhere operations) COVID-19 상황에서도 운영이 필수적입니다. 이 운영 모델을 통해 고객, 고용주 및 비즈니스 파트너가 원격환경에서 운영되는 모든 곳에서 비즈니스에 접근하고 활성화 할 수 있습니다. 어디서나 작동하는 운영 모델은 “디지털 우선, 원격 우선”입니다. 예를 들어, 모바일 전용이지만 물리적인 상호 작용없이 자금 이체에서 계좌 개설까지 모든 것을 처리하는 은행이 있습니다. 물리적 지점 없이 디지털 방식으로 제공되어야 현 상황을 이겨낼 수 있습니다. (e.g. 카카오뱅크?) 트렌드 6: 사이버 보안 메시 (Cybersecurity mesh) 사이버 보안 메시는 확장 가능하고 유연한 사이버 보안 제어에 대한 분산 아키텍처 접근 방식입니다. 현재 많은 자산이 기존 보안 체계를 벗어나 외부에 존재합니다. 사이버 보안 메시는 본질적으로 사람이나 사물의 신원을 중심으로 보안 경계를 정의 할 수 있도록 합니다. 정책을 중앙으로 집중시키고 정책 시행을 분산함으로써 모듈식의 대응력있는보안 접근 방식을 가능하게 합니다. 경계 보호의 의미가 낮아짐에 따라 “성벽 도시”의 보안 접근 방식은 현재 요구사항에 맞게 진화해야 합니다. 트렌드 7: 지능형 컴포저블 비즈니스 (Intelligent composable business) 지능형 컴포저블 비즈니스는 상황에 따라 적응하고 근본적으로 재정렬 할 수 있는 비즈니스입니다. 조직이 디지털 비즈니스 전략을 가속화하여 더 빠른 디지털 전환을 추진 함에 따라 민첩하게 현재 사용 가능한 데이터를 기반으로 비즈니스 결정을 내려야 합니다. 이를 성공적으로 수행하기 위해서는 정보에 대해 더 나은 접근이 가능해야 하고 더 나은 통찰력으로 정보를 보강하여 신속하게 대응할 수 있어야 합니다. 트렌드 8: AI 엔지니어링 (AI engineering) AI 엔지니어링 전략은 AI투자에 대한 전체 가치를 제공하면서 AI 모델의 성능, 확장성, 해석 가능성 및 안정성을 촉진합니다. AI 프로젝트는 유지 보수성, 확장성 및 정책과 관련된 문제에 직면하기에 문제가 될 소지가 있습니다. AI 엔지니어링은 AI를 전문적이고 격리된 프로젝트 세트가 아닌 DevOps 프로세스의 일부로 만듭니다. 여러 AI 기술의 조합을 운영할 때 명확한 방법을 제공합니다. AI 엔지니어링의 정책 측면으로 인해 책임감있는 AI가 신뢰, 투명성, 윤리, 공정성, 해석 가능성 및 규정 준수 문제를 처리하기 위해 등장하고 있고 이는 AI 책임 운영화입니다. 트렌드 9: 초자동화 (Hyperautomation) Hyperautomation은 조직에서 자동화 할 수 있는 모든 것을 자동화해야 한다는 생각입니다. 능률적이지 않은 레거시 비즈니스 프로세스를 가진 조직에 의해 주도되어 조직에 막대한 비용과 광범위한 문제를 발생 시킬 수 있습니다. 많은 조직은 Lean, 최적화, 연결등의 기술 지원을 받습니다. 동시에 디지털 비즈니스의 가속화에는 효율성, 속도가 필요합니다. 효율성 및 비즈니스 민첩성에 초점을 맞추지 않는 조직은 뒤쳐 질 것입니다. References: https://www.gartner.com/smarterwithgartner/gartner-top-strategic-technology-trends-for-2021/</summary></entry><entry><title type="html">언택트 시대의 Virtual Store — Clikshop</title><link href="https://giljae.com/blog/2020/12/02/%EC%96%B8%ED%83%9D%ED%8A%B8-%EC%8B%9C%EB%8C%80%EC%9D%98-Virtual-Store-Clikshop.html" rel="alternate" type="text/html" title="언택트 시대의 Virtual Store — Clikshop" /><published>2020-12-02T00:00:00+00:00</published><updated>2020-12-02T00:00:00+00:00</updated><id>https://giljae.com/blog/2020/12/02/%EC%96%B8%ED%83%9D%ED%8A%B8%20%EC%8B%9C%EB%8C%80%EC%9D%98%20Virtual%20Store%20%E2%80%94%20Clikshop</id><content type="html" xml:base="https://giljae.com/blog/2020/12/02/%EC%96%B8%ED%83%9D%ED%8A%B8-%EC%8B%9C%EB%8C%80%EC%9D%98-Virtual-Store-Clikshop.html">&lt;p&gt;코로나 시대에 사람이 붐비는 쇼핑몰을 피하고자 하는 마음은 누구에게나 있을 것이다. 그래서 오프라인 상점들이 직격탄을 맞고 있고 대부분 온라인에서 쇼핑을 하고 있을 것이다.&lt;/p&gt;

&lt;p&gt;이런 상황에 실제 매장을 온라인 상에 구현해 놓은 Virtual Store가 등장하고 있다. Virtual Store란 실제 매장을 3차원 스캔 기술을 이용해 온라인으로 옮겨 놓은 상점을 의미한다. 아래의 영상은 Brik + Clik 에서 제공하는 Virtual Store 영상이다.&lt;/p&gt;

&lt;iframe width=&quot;665&quot; height=&quot;510&quot; src=&quot;https://www.youtube.com/embed/NdNO9u3v1rM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;PC 혹은 모바일 기기에서 매장에서 쇼핑을 하는 듯한 느낌을 주면서 제품의 링크를 통해 온라인 구매가 가능하도록 해준다. 사람마다 편차가 있겠지만, 나의 경우는 그냥 온라인에서 구매하는 것이 편한 것 같다. (VR이라면 좋아했을지도…)&lt;/p&gt;

&lt;p&gt;Brik + Clik 뿐만 아니라 국내에서도 Virtual Store를 제공하는 매장들이 많이 생기는 것 같다. 언택트 소비가 대세로 떠오른 코로나 시대에 위기 돌파구 혹은 새로운 기회로 보는 것인가? 매출로 이어지고 있는지 궁금하다.&lt;/p&gt;

&lt;p&gt;코로나로 인해 “집콕족”이 증가하는 현시점에 VR/AR 시장이 탄력을 받지 않을까 조심스레 예상해본다.&lt;/p&gt;

&lt;p&gt;체험하기: https://app.cart360.shop/s/brik-clik&lt;/p&gt;</content><author><name>Giljae Joo (주길재)</name><email>giljae@gmail.com</email></author><category term="Virtual" /><category term="Store" /><summary type="html">코로나 시대에 사람이 붐비는 쇼핑몰을 피하고자 하는 마음은 누구에게나 있을 것이다. 그래서 오프라인 상점들이 직격탄을 맞고 있고 대부분 온라인에서 쇼핑을 하고 있을 것이다. 이런 상황에 실제 매장을 온라인 상에 구현해 놓은 Virtual Store가 등장하고 있다. Virtual Store란 실제 매장을 3차원 스캔 기술을 이용해 온라인으로 옮겨 놓은 상점을 의미한다. 아래의 영상은 Brik + Clik 에서 제공하는 Virtual Store 영상이다. PC 혹은 모바일 기기에서 매장에서 쇼핑을 하는 듯한 느낌을 주면서 제품의 링크를 통해 온라인 구매가 가능하도록 해준다. 사람마다 편차가 있겠지만, 나의 경우는 그냥 온라인에서 구매하는 것이 편한 것 같다. (VR이라면 좋아했을지도…) Brik + Clik 뿐만 아니라 국내에서도 Virtual Store를 제공하는 매장들이 많이 생기는 것 같다. 언택트 소비가 대세로 떠오른 코로나 시대에 위기 돌파구 혹은 새로운 기회로 보는 것인가? 매출로 이어지고 있는지 궁금하다. 코로나로 인해 “집콕족”이 증가하는 현시점에 VR/AR 시장이 탄력을 받지 않을까 조심스레 예상해본다. 체험하기: https://app.cart360.shop/s/brik-clik</summary></entry></feed>